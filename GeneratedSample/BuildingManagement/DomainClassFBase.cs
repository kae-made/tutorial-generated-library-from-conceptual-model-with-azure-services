// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace BuildingManagement
{
    public partial class DomainClassFBase : DomainClassF
    {
        protected static readonly string className = "F";

        public string DomainName { get { return CIMBuildingManagementLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"FloorId={attr_FloorId}"; }

        public static DomainClassFBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassFBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:F(FloorId={newInstance.Attr_FloorId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassFBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_FloorId = Guid.NewGuid().ToString();
        }
        protected string attr_BuildingId;
        protected bool stateof_BuildingId = false;

        protected int attr_FloorNo;
        protected bool stateof_FloorNo = false;

        protected string attr_FloorId;
        protected bool stateof_FloorId = false;

        public string Attr_BuildingId { get { return attr_BuildingId; } }
        public int Attr_FloorNo { get { return attr_FloorNo; } set { attr_FloorNo = value; stateof_FloorNo = true; } }
        public string Attr_FloorId { get { return attr_FloorId; } set { attr_FloorId = value; stateof_FloorId = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassF instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "BuildingId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_BuildingId)
                        {
                            result = false;
                        }
                        break;
                    case "FloorNo":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_FloorNo)
                        {
                            result = false;
                        }
                        break;
                    case "FloorId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_FloorId)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR1B;
        public DomainClassB LinkedR1()
        {
            if (relR1B == null)
            {
                var candidates = instanceRepository.GetDomainInstances("B").Where(inst=>(this.Attr_BuildingId==((DomainClassB)inst).Attr_BuildingId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "B", "R1", candidates, () => { return DomainClassBBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR1B = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R1", Phrase = "" };

            }
            return relR1B.GetDestination<DomainClassB>();
        }

        public bool LinkR1(DomainClassB instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR1B == null)
            {
                this.attr_BuildingId = instance.Attr_BuildingId;
                this.stateof_BuildingId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:F(FloorId={this.Attr_FloorId}):link[B(BuildingId={instance.Attr_BuildingId})]");

                result = (LinkedR1()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR1B });
                }
            }
            return result;
        }

        public bool UnlinkR1(DomainClassB instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR1B != null && ( this.Attr_BuildingId==instance.Attr_BuildingId ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR1B });
        
                this.attr_BuildingId = null;
                this.stateof_BuildingId = true;
                relR1B = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:F(FloorId={this.Attr_FloorId}):unlink[B(BuildingId={instance.Attr_BuildingId})]");


                result = true;
            }
            return result;
        }

        public IEnumerable<DomainClassR> LinkedR2()
        {
            var result = new List<DomainClassR>();
            var candidates = instanceRepository.GetDomainInstances("R").Where(inst=>(this.Attr_FloorId==((DomainClassR)inst).Attr_FloorId));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "R", "R2", candidates, () => { return DomainClassRBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassR)c).LinkedR2();
                result.Add((DomainClassR)c);
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            if (relR1B == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:F(FloorId={this.Attr_FloorId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("BuildingId"))
            {
                attr_BuildingId = (string)propertyValues["BuildingId"];
            }
            stateof_BuildingId = false;
            if (propertyValues.ContainsKey("FloorNo"))
            {
                attr_FloorNo = (int)propertyValues["FloorNo"];
            }
            stateof_FloorNo = false;
            if (propertyValues.ContainsKey("FloorId"))
            {
                attr_FloorId = (string)propertyValues["FloorId"];
            }
            stateof_FloorId = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_BuildingId)
            {
                results.Add("BuildingId", attr_BuildingId);
                stateof_BuildingId = false;
            }
            if (stateof_FloorNo)
            {
                results.Add("FloorNo", attr_FloorNo);
                stateof_FloorNo = false;
            }
            if (stateof_FloorId)
            {
                results.Add("FloorId", attr_FloorId);
                stateof_FloorId = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"FloorId={this.Attr_FloorId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("BuildingId", attr_BuildingId);
            results.Add("FloorNo", attr_FloorNo);
            results.Add("FloorId", attr_FloorId);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
