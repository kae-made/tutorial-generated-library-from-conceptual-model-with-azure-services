// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Azure.Core;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BuildingManagement.Adaptor
{
    // Entry for Application front end.
    public static class DomainModelAdaptorEntry
    {
        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();
        public static DomainModelAdaptor GetAdaptor(Logger logger) { foreach (var k in Configuration.Keys) { BuildingManagementAdaptor.Configuration.Add(k, Configuration[k]); } return BuildingManagementAdaptor.GetInstance(logger); }
    }

    public class BuildingManagementAdaptor : DomainModelAdaptor
    {
        CIMBuildingManagementLib domainModel;

        public static DomainModelAdaptor adapterInstance = null;

        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();

        public static DomainModelAdaptor GetInstance(Logger logger)
        {
            if (adapterInstance == null)
            {
                var instanceRepository = new InstanceRepositoryInMemory(logger);

                var cimLib = new CIMBuildingManagementLib(instanceRepository);
                adapterInstance = new BuildingManagementAdaptor(cimLib, logger);
            }
            return adapterInstance;
        }

        public override IDictionary<string, IList<string>> ConfigurationKeys()
        {
            var configurationKeys = new Dictionary<string, IList<string>>();

            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                configurationKeys.Add(externalEntity.EEKey, new List<string>());
                foreach(var cKey in externalEntity.ConfigurationKeys)
                {
                    configurationKeys[externalEntity.EEKey].Add(cKey);
                }
            }

            // for Azure Digital Twins Adaptor
            configurationKeys.Add("AzureDigitalTwins", new List<string>());
            configurationKeys["AzureDigitalTwins"].Add("ADTInstanceUri");
            configurationKeys["AzureDigitalTwins"].Add("ADTCredential");

            return configurationKeys;
        }

        public override void Initialize(IDictionary<string, IDictionary<string, object>> config)
        {
            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                externalEntity.Initialize(config[externalEntity.EEKey]);
            }

            // for Azure Digital Twins
            string adtInstanceUri = (string)config["AzureDigitalTwins"]["ADTInstanceUri"];
            TokenCredential adtCredential = (TokenCredential)config["AzureDigitalTwins"]["ADTCredential"];
            var azureDigitalTwinsAdaptor = new ADTTestModelAzureDigitalTwinsAdaptor(adtInstanceUri, adtCredential, domainModel.InstanceRepository, logger);
            azureDigitalTwinsAdaptor.Initialize();
            domainModel.InstanceRepository.ExternalStorageAdaptor = azureDigitalTwinsAdaptor;
        }

        public BuildingManagementAdaptor(CIMBuildingManagementLib domainModel, Logger logger) : base(logger)
        {
            this.domainModel = domainModel;
            domainOpsParamSpecs = _domainOpsParamSpecs;
            classSpecs = _classSpecs;
            domainModelName = "BuildingManagement";
        }

        protected Dictionary<string, Dictionary<string, ParamSpec>> _domainOpsParamSpecs = new Dictionary<string, Dictionary<string, ParamSpec>>()
        {
        };

        protected Dictionary<string, ClassSpec> _classSpecs = new Dictionary<string, ClassSpec>()
        {
            {
                "AT", new ClassSpec()
                {                
                    Name = "Affection Target",
                    KeyLetter = "AT",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "MeasuringInstId", new PropSpec()
                            { Name = "MeasuringInstId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "AirConId", new PropSpec()
                            { Name = "AirConId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "MI[R6]", new LinkSpec()
                            { Name = "MI[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "MI" }
                        },
                        {
                            "AC[R6.'affect']", new LinkSpec()
                            { Name = "AC[R6.'affect']", RelID = "R6", Phrase = "affect", Set = false, Condition = false, DstKeyLett = "AC" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "MI", new ClassSpec()
                {                
                    Name = "Measuring Instruments",
                    KeyLetter = "MI",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "MeasuringInstId", new PropSpec()
                            { Name = "MeasuringInstId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TargetRoomId", new PropSpec()
                            { Name = "TargetRoomId", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "ModelName", new PropSpec()
                            { Name = "ModelName", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Environment", new PropSpec()
                            { Name = "Environment", DataType = ParamSpec.DataType.Complex, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "RequestInterval", new PropSpec()
                            { Name = "RequestInterval", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "CurrentInterval", new PropSpec()
                            { Name = "CurrentInterval", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "DeviceStatus", new PropSpec()
                            { Name = "DeviceStatus", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "Start", new OperationSpec()
                            {
                                Name = "Start", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "Stop", new OperationSpec()
                            {
                                Name = "Stop", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "AT[R6]", new LinkSpec()
                            { Name = "AT[R6]", RelID = "R6", Phrase = "", Set = true, Condition = true, DstKeyLett = "AT" }
                        },
                        {
                            "R[R3.'measuaring']", new LinkSpec()
                            { Name = "R[R3.'measuaring']", RelID = "R3", Phrase = "measuaring", Set = false, Condition = false, DstKeyLett = "R" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "R", new ClassSpec()
                {                
                    Name = "Room",
                    KeyLetter = "R",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "RoomId", new PropSpec()
                            { Name = "RoomId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "FloorId", new PropSpec()
                            { Name = "FloorId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "RoomName", new PropSpec()
                            { Name = "RoomName", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "CurrentEnvironment", new PropSpec()
                            { Name = "CurrentEnvironment", DataType = ParamSpec.DataType.Complex, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PreferredEnvironment", new PropSpec()
                            { Name = "PreferredEnvironment", DataType = ParamSpec.DataType.Complex, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "MI[R3]", new LinkSpec()
                            { Name = "MI[R3]", RelID = "R3", Phrase = "", Set = true, Condition = true, DstKeyLett = "MI" }
                        },
                        {
                            "AC[R4.'installed']", new LinkSpec()
                            { Name = "AC[R4.'installed']", RelID = "R4", Phrase = "installed", Set = true, Condition = false, DstKeyLett = "AC" }
                        },
                        {
                            "WL[R5]", new LinkSpec()
                            { Name = "WL[R5]", RelID = "R5", Phrase = "", Set = false, Condition = true, DstKeyLett = "WL" }
                        },
                        {
                            "LC[R8]", new LinkSpec()
                            { Name = "LC[R8]", RelID = "R8", Phrase = "", Set = false, Condition = true, DstKeyLett = "LC" }
                        },
                        {
                            "F[R2]", new LinkSpec()
                            { Name = "F[R2]", RelID = "R2", Phrase = "", Set = false, Condition = false, DstKeyLett = "F" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "F", new ClassSpec()
                {                
                    Name = "Floor",
                    KeyLetter = "F",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "BuildingId", new PropSpec()
                            { Name = "BuildingId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "FloorNo", new PropSpec()
                            { Name = "FloorNo", DataType = ParamSpec.DataType.Integer, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "FloorId", new PropSpec()
                            { Name = "FloorId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "B[R1]", new LinkSpec()
                            { Name = "B[R1]", RelID = "R1", Phrase = "", Set = false, Condition = false, DstKeyLett = "B" }
                        },
                        {
                            "R[R2]", new LinkSpec()
                            { Name = "R[R2]", RelID = "R2", Phrase = "", Set = true, Condition = true, DstKeyLett = "R" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "B", new ClassSpec()
                {                
                    Name = "Building",
                    KeyLetter = "B",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "BuildingId", new PropSpec()
                            { Name = "BuildingId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Address", new PropSpec()
                            { Name = "Address", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "F[R1]", new LinkSpec()
                            { Name = "F[R1]", RelID = "R1", Phrase = "", Set = true, Condition = false, DstKeyLett = "F" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "AC", new ClassSpec()
                {                
                    Name = "Air Conditioner",
                    KeyLetter = "AC",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "AirConId", new PropSpec()
                            { Name = "AirConId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TargetRoomId", new PropSpec()
                            { Name = "TargetRoomId", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "ModelName", new PropSpec()
                            { Name = "ModelName", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PowerState", new PropSpec()
                            { Name = "PowerState", DataType = ParamSpec.DataType.Boolean, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PowerWatts", new PropSpec()
                            { Name = "PowerWatts", DataType = ParamSpec.DataType.Real, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "CurrentState", new PropSpec()
                            { Name = "CurrentState", DataType = ParamSpec.DataType.Enum, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "Execute", new OperationSpec()
                            {
                                Name = "Execute", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "command", new ParamSpec() {Name = "command", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "AT[R6.'affect']", new LinkSpec()
                            { Name = "AT[R6.'affect']", RelID = "R6", Phrase = "affect", Set = false, Condition = true, DstKeyLett = "AT" }
                        },
                        {
                            "R[R4]", new LinkSpec()
                            { Name = "R[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "R" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "CE", new ClassSpec()
                {                
                    Name = "Customer Engineer",
                    KeyLetter = "CE",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "CustomerEngineerId", new PropSpec()
                            { Name = "CustomerEngineerId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "WA[R7.'responsible person']", new LinkSpec()
                            { Name = "WA[R7.'responsible person']", RelID = "R7", Phrase = "responsible person", Set = false, Condition = true, DstKeyLett = "WA" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "CS", new ClassSpec()
                {                
                    Name = "Customer",
                    KeyLetter = "CS",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "CustomerId", new PropSpec()
                            { Name = "CustomerId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "CustomerCode", new PropSpec()
                            { Name = "CustomerCode", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "LC[R8]", new LinkSpec()
                            { Name = "LC[R8]", RelID = "R8", Phrase = "", Set = true, Condition = true, DstKeyLett = "LC" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "LC", new ClassSpec()
                {                
                    Name = "Lease Contruct",
                    KeyLetter = "LC",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "CustomerId", new PropSpec()
                            { Name = "CustomerId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "RoomId", new PropSpec()
                            { Name = "RoomId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "ContructNumber", new PropSpec()
                            { Name = "ContructNumber", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "CS[R8]", new LinkSpec()
                            { Name = "CS[R8]", RelID = "R8", Phrase = "", Set = false, Condition = false, DstKeyLett = "CS" }
                        },
                        {
                            "R[R8]", new LinkSpec()
                            { Name = "R[R8]", RelID = "R8", Phrase = "", Set = false, Condition = false, DstKeyLett = "R" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "WA", new ClassSpec()
                {                
                    Name = "Workload Assignment",
                    KeyLetter = "WA",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "WorkloadId", new PropSpec()
                            { Name = "WorkloadId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "CustomerEngineerId", new PropSpec()
                            { Name = "CustomerEngineerId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "WL[R7.'contract']", new LinkSpec()
                            { Name = "WL[R7.'contract']", RelID = "R7", Phrase = "contract", Set = false, Condition = false, DstKeyLett = "WL" }
                        },
                        {
                            "CE[R7.'responsible person']", new LinkSpec()
                            { Name = "CE[R7.'responsible person']", RelID = "R7", Phrase = "responsible person", Set = false, Condition = false, DstKeyLett = "CE" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "WL", new ClassSpec()
                {                
                    Name = "Workload",
                    KeyLetter = "WL",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "WorkloadId", new PropSpec()
                            { Name = "WorkloadId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TargetRoomId", new PropSpec()
                            { Name = "TargetRoomId", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "CurrentStatus", new PropSpec()
                            { Name = "CurrentStatus", DataType = ParamSpec.DataType.Enum, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "OccurrenceDate", new PropSpec()
                            { Name = "OccurrenceDate", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "AssignedDate", new PropSpec()
                            { Name = "AssignedDate", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PlannedDate", new PropSpec()
                            { Name = "PlannedDate", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "StartDate", new PropSpec()
                            { Name = "StartDate", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "EndDate", new PropSpec()
                            { Name = "EndDate", DataType = ParamSpec.DataType.DateTime, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "WA[R7.'contract']", new LinkSpec()
                            { Name = "WA[R7.'contract']", RelID = "R7", Phrase = "contract", Set = false, Condition = true, DstKeyLett = "WA" }
                        },
                        {
                            "R[R5.'target']", new LinkSpec()
                            { Name = "R[R5.'target']", RelID = "R5", Phrase = "target", Set = false, Condition = false, DstKeyLett = "R" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            }
        };

        public override string InvokeDomainOperation(string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (domainOpsParamSpecs.ContainsKey(name))
            {
                var opSpec = domainOpsParamSpecs[name];
                RequestingParameters invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>() };
                if (CheckParameters(opSpec, parameters, invSpec))
                {
                    switch (name)
                    {
                    }
                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) domainModel.InstanceRepository.ExternalStorageAdaptor.ClearCache(CIMBuildingManagementLib.DomainName);

                }
            }

            return result;
        }

        public override string InvokeDomainClassOperation(string classKeyLett, string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "MI":
                                    var instanceOfMITempSet = domainModel.InstanceRepository.GetDomainInstances("MI").Where(selected => (((DomainClassMI)selected).Attr_MeasuringInstId == invSpec.Identities["MeasuringInstId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfMITempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMBuildingManagementLib.DomainName, "MI", instanceOfMITempSet, () => { return $"MeasuringInstId = '{invSpec.Identities["MeasuringInstId"]}'"; }, () => { return DomainClassMIBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfMI = (DomainClassMI)instanceOfMITempSet.FirstOrDefault();
                                    if (instanceOfMI != null)
                                    {
                                        switch (name)
                                        {
                                            case "Start":
                                                instanceOfMI.Start();
                                                break;
                                            case "Stop":
                                                instanceOfMI.Stop();
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                                case "AC":
                                    var instanceOfACTempSet = domainModel.InstanceRepository.GetDomainInstances("AC").Where(selected => (((DomainClassAC)selected).Attr_AirConId == invSpec.Identities["AirConId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfACTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMBuildingManagementLib.DomainName, "AC", instanceOfACTempSet, () => { return $"AirConId = '{invSpec.Identities["AirConId"]}'"; }, () => { return DomainClassACBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfAC = (DomainClassAC)instanceOfACTempSet.FirstOrDefault();
                                    if (instanceOfAC != null)
                                    {
                                        switch (name)
                                        {
                                            case "Execute":
                                                instanceOfAC.Execute(command:(string)invSpec.Parameters["command"]);
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                            }
                        }
                    }

                }
            }

            return result;
        }

        public override string SendEvent(string classKeyLett, string name, RequestingParameters parameters)
        {
            string status = "";
            bool sent = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Events.ContainsKey(name))
                {
                    var evtSpec = classSpec.Events[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(evtSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                            }
                        }
                    }
                }
            }
            var result = new { sent = sent, status = status };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string UpdateClassProperties(string classKeyLett, RequestingParameters parameters)
        {
            bool updated = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                if (CheckProperties(classSpec.Properties, parameters, invSpec))
                {
                    switch (classKeyLett)
                    {
                        case "MI":
                            var instanceOfMI = (DomainClassMI)domainModel.InstanceRepository.GetDomainInstances("MI").Where(selected => (((DomainClassMI)selected).Attr_MeasuringInstId == invSpec.Identities["MeasuringInstId"])).FirstOrDefault();
                            if (instanceOfMI != null)
                            {
                                if (invSpec.Parameters.ContainsKey("ModelName"))
                                {
                                    instanceOfMI.Attr_ModelName = (string)invSpec.Parameters["ModelName"];
                                }
                                if (invSpec.Parameters.ContainsKey("Environment"))
                                {
                                    instanceOfMI.Attr_Environment.Restore((IDictionary<string, object>)invSpec.Parameters["Environment"]);
                                }
                                if (invSpec.Parameters.ContainsKey("RequestInterval"))
                                {
                                    instanceOfMI.Attr_RequestInterval = (int)invSpec.Parameters["RequestInterval"];
                                }
                                if (invSpec.Parameters.ContainsKey("CurrentInterval"))
                                {
                                    instanceOfMI.Attr_CurrentInterval = (int)invSpec.Parameters["CurrentInterval"];
                                }
                                if (invSpec.Parameters.ContainsKey("DeviceStatus"))
                                {
                                    instanceOfMI.Attr_DeviceStatus = (string)invSpec.Parameters["DeviceStatus"];
                                }
                                updated = true;
                            }
                            break;
                        case "R":
                            var instanceOfR = (DomainClassR)domainModel.InstanceRepository.GetDomainInstances("R").Where(selected => (((DomainClassR)selected).Attr_RoomId == invSpec.Identities["RoomId"])).FirstOrDefault();
                            if (instanceOfR != null)
                            {
                                if (invSpec.Parameters.ContainsKey("CurrentEnvironment"))
                                {
                                    instanceOfR.Attr_CurrentEnvironment.Restore((IDictionary<string, object>)invSpec.Parameters["CurrentEnvironment"]);
                                }
                                if (invSpec.Parameters.ContainsKey("PreferredEnvironment"))
                                {
                                    instanceOfR.Attr_PreferredEnvironment.Restore((IDictionary<string, object>)invSpec.Parameters["PreferredEnvironment"]);
                                }
                                updated = true;
                            }
                            break;
                        case "B":
                            var instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_BuildingId == invSpec.Identities["BuildingId"])).FirstOrDefault();
                            if (instanceOfB != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Name"))
                                {
                                    instanceOfB.Attr_Name = (string)invSpec.Parameters["Name"];
                                }
                                if (invSpec.Parameters.ContainsKey("Address"))
                                {
                                    instanceOfB.Attr_Address = (string)invSpec.Parameters["Address"];
                                }
                                updated = true;
                            }
                            break;
                        case "AC":
                            var instanceOfAC = (DomainClassAC)domainModel.InstanceRepository.GetDomainInstances("AC").Where(selected => (((DomainClassAC)selected).Attr_AirConId == invSpec.Identities["AirConId"])).FirstOrDefault();
                            if (instanceOfAC != null)
                            {
                                if (invSpec.Parameters.ContainsKey("ModelName"))
                                {
                                    instanceOfAC.Attr_ModelName = (string)invSpec.Parameters["ModelName"];
                                }
                                if (invSpec.Parameters.ContainsKey("PowerState"))
                                {
                                    instanceOfAC.Attr_PowerState = (bool)invSpec.Parameters["PowerState"];
                                }
                                if (invSpec.Parameters.ContainsKey("PowerWatts"))
                                {
                                    instanceOfAC.Attr_PowerWatts = (double)invSpec.Parameters["PowerWatts"];
                                }
                                if (invSpec.Parameters.ContainsKey("CurrentState"))
                                {
                                    instanceOfAC.Attr_CurrentState = (DomainTypeEquipmentsState)invSpec.Parameters["CurrentState"];
                                }
                                updated = true;
                            }
                            break;
                        case "CE":
                            var instanceOfCE = (DomainClassCE)domainModel.InstanceRepository.GetDomainInstances("CE").Where(selected => (((DomainClassCE)selected).Attr_CustomerEngineerId == invSpec.Identities["CustomerEngineerId"])).FirstOrDefault();
                            if (instanceOfCE != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Name"))
                                {
                                    instanceOfCE.Attr_Name = (string)invSpec.Parameters["Name"];
                                }
                                updated = true;
                            }
                            break;
                        case "CS":
                            var instanceOfCS = (DomainClassCS)domainModel.InstanceRepository.GetDomainInstances("CS").Where(selected => (((DomainClassCS)selected).Attr_CustomerId == invSpec.Identities["CustomerId"])).FirstOrDefault();
                            if (instanceOfCS != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Name"))
                                {
                                    instanceOfCS.Attr_Name = (string)invSpec.Parameters["Name"];
                                }
                                updated = true;
                            }
                            break;
                        case "WL":
                            var instanceOfWL = (DomainClassWL)domainModel.InstanceRepository.GetDomainInstances("WL").Where(selected => (((DomainClassWL)selected).Attr_WorkloadId == invSpec.Identities["WorkloadId"])).FirstOrDefault();
                            if (instanceOfWL != null)
                            {
                                if (invSpec.Parameters.ContainsKey("CurrentStatus"))
                                {
                                    instanceOfWL.Attr_CurrentStatus = (DomainTypeWorkloadState)invSpec.Parameters["CurrentStatus"];
                                }
                                if (invSpec.Parameters.ContainsKey("OccurrenceDate"))
                                {
                                    instanceOfWL.Attr_OccurrenceDate = (DateTime)invSpec.Parameters["OccurrenceDate"];
                                }
                                if (invSpec.Parameters.ContainsKey("AssignedDate"))
                                {
                                    instanceOfWL.Attr_AssignedDate = (DateTime)invSpec.Parameters["AssignedDate"];
                                }
                                if (invSpec.Parameters.ContainsKey("PlannedDate"))
                                {
                                    instanceOfWL.Attr_PlannedDate = (DateTime)invSpec.Parameters["PlannedDate"];
                                }
                                if (invSpec.Parameters.ContainsKey("StartDate"))
                                {
                                    instanceOfWL.Attr_StartDate = (DateTime)invSpec.Parameters["StartDate"];
                                }
                                if (invSpec.Parameters.ContainsKey("EndDate"))
                                {
                                    instanceOfWL.Attr_EndDate = (DateTime)invSpec.Parameters["EndDate"];
                                }
                                updated = true;
                            }
                            break;
                    }              
                }
            }
            if (updated)
            {
                domainModel.InstanceRepository.SyncChangedStates(new List<ChangedState>());
            }
            var result = new { updated = updated };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string GetInstances(string classKeyLett)
        {
            List<Dictionary<string, object>> resultInstances = GetInstancesRaw(classKeyLett);

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        protected List<Dictionary<string, object>> GetInstancesRaw(string classKeyLett)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var instances = domainModel.InstanceRepository.GetDomainInstances(classKeyLett);
                foreach (var instance in instances)
                {
                    switch (classKeyLett)
                    {
                        case "AT":
                            var instanceOfAT = (DomainClassAT)instance;
                            var resultOfinstanceOfAT = new Dictionary<string, object>();
                            resultOfinstanceOfAT.Add("MeasuringInstId", instanceOfAT.Attr_MeasuringInstId);
                            resultOfinstanceOfAT.Add("AirConId", instanceOfAT.Attr_AirConId);
                            resultInstances.Add(resultOfinstanceOfAT);
                            break;
                        case "MI":
                            var instanceOfMI = (DomainClassMI)instance;
                            var resultOfinstanceOfMI = new Dictionary<string, object>();
                            resultOfinstanceOfMI.Add("MeasuringInstId", instanceOfMI.Attr_MeasuringInstId);
                            resultOfinstanceOfMI.Add("TargetRoomId", instanceOfMI.Attr_TargetRoomId);
                            resultOfinstanceOfMI.Add("ModelName", instanceOfMI.Attr_ModelName);
                            resultOfinstanceOfMI.Add("Environment", instanceOfMI.Attr_Environment);
                            resultOfinstanceOfMI.Add("RequestInterval", instanceOfMI.Attr_RequestInterval);
                            resultOfinstanceOfMI.Add("CurrentInterval", instanceOfMI.Attr_CurrentInterval);
                            resultOfinstanceOfMI.Add("DeviceStatus", instanceOfMI.Attr_DeviceStatus);
                            resultInstances.Add(resultOfinstanceOfMI);
                            break;
                        case "R":
                            var instanceOfR = (DomainClassR)instance;
                            var resultOfinstanceOfR = new Dictionary<string, object>();
                            resultOfinstanceOfR.Add("RoomId", instanceOfR.Attr_RoomId);
                            resultOfinstanceOfR.Add("FloorId", instanceOfR.Attr_FloorId);
                            resultOfinstanceOfR.Add("RoomName", instanceOfR.Attr_RoomName);
                            resultOfinstanceOfR.Add("CurrentEnvironment", instanceOfR.Attr_CurrentEnvironment);
                            resultOfinstanceOfR.Add("PreferredEnvironment", instanceOfR.Attr_PreferredEnvironment);
                            resultInstances.Add(resultOfinstanceOfR);
                            break;
                        case "F":
                            var instanceOfF = (DomainClassF)instance;
                            var resultOfinstanceOfF = new Dictionary<string, object>();
                            resultOfinstanceOfF.Add("BuildingId", instanceOfF.Attr_BuildingId);
                            resultOfinstanceOfF.Add("FloorNo", instanceOfF.Attr_FloorNo);
                            resultOfinstanceOfF.Add("FloorId", instanceOfF.Attr_FloorId);
                            resultInstances.Add(resultOfinstanceOfF);
                            break;
                        case "B":
                            var instanceOfB = (DomainClassB)instance;
                            var resultOfinstanceOfB = new Dictionary<string, object>();
                            resultOfinstanceOfB.Add("BuildingId", instanceOfB.Attr_BuildingId);
                            resultOfinstanceOfB.Add("Name", instanceOfB.Attr_Name);
                            resultOfinstanceOfB.Add("Address", instanceOfB.Attr_Address);
                            resultInstances.Add(resultOfinstanceOfB);
                            break;
                        case "AC":
                            var instanceOfAC = (DomainClassAC)instance;
                            var resultOfinstanceOfAC = new Dictionary<string, object>();
                            resultOfinstanceOfAC.Add("AirConId", instanceOfAC.Attr_AirConId);
                            resultOfinstanceOfAC.Add("TargetRoomId", instanceOfAC.Attr_TargetRoomId);
                            resultOfinstanceOfAC.Add("ModelName", instanceOfAC.Attr_ModelName);
                            resultOfinstanceOfAC.Add("PowerState", instanceOfAC.Attr_PowerState);
                            resultOfinstanceOfAC.Add("PowerWatts", instanceOfAC.Attr_PowerWatts);
                            resultOfinstanceOfAC.Add("CurrentState", instanceOfAC.Attr_CurrentState);
                            resultInstances.Add(resultOfinstanceOfAC);
                            break;
                        case "CE":
                            var instanceOfCE = (DomainClassCE)instance;
                            var resultOfinstanceOfCE = new Dictionary<string, object>();
                            resultOfinstanceOfCE.Add("CustomerEngineerId", instanceOfCE.Attr_CustomerEngineerId);
                            resultOfinstanceOfCE.Add("Name", instanceOfCE.Attr_Name);
                            resultInstances.Add(resultOfinstanceOfCE);
                            break;
                        case "CS":
                            var instanceOfCS = (DomainClassCS)instance;
                            var resultOfinstanceOfCS = new Dictionary<string, object>();
                            resultOfinstanceOfCS.Add("CustomerId", instanceOfCS.Attr_CustomerId);
                            resultOfinstanceOfCS.Add("CustomerCode", instanceOfCS.Attr_CustomerCode);
                            resultOfinstanceOfCS.Add("Name", instanceOfCS.Attr_Name);
                            resultInstances.Add(resultOfinstanceOfCS);
                            break;
                        case "LC":
                            var instanceOfLC = (DomainClassLC)instance;
                            var resultOfinstanceOfLC = new Dictionary<string, object>();
                            resultOfinstanceOfLC.Add("CustomerId", instanceOfLC.Attr_CustomerId);
                            resultOfinstanceOfLC.Add("RoomId", instanceOfLC.Attr_RoomId);
                            resultOfinstanceOfLC.Add("ContructNumber", instanceOfLC.Attr_ContructNumber);
                            resultInstances.Add(resultOfinstanceOfLC);
                            break;
                        case "WA":
                            var instanceOfWA = (DomainClassWA)instance;
                            var resultOfinstanceOfWA = new Dictionary<string, object>();
                            resultOfinstanceOfWA.Add("WorkloadId", instanceOfWA.Attr_WorkloadId);
                            resultOfinstanceOfWA.Add("CustomerEngineerId", instanceOfWA.Attr_CustomerEngineerId);
                            resultInstances.Add(resultOfinstanceOfWA);
                            break;
                        case "WL":
                            var instanceOfWL = (DomainClassWL)instance;
                            var resultOfinstanceOfWL = new Dictionary<string, object>();
                            resultOfinstanceOfWL.Add("WorkloadId", instanceOfWL.Attr_WorkloadId);
                            resultOfinstanceOfWL.Add("TargetRoomId", instanceOfWL.Attr_TargetRoomId);
                            resultOfinstanceOfWL.Add("CurrentStatus", instanceOfWL.Attr_CurrentStatus);
                            resultOfinstanceOfWL.Add("OccurrenceDate", instanceOfWL.Attr_OccurrenceDate);
                            resultOfinstanceOfWL.Add("AssignedDate", instanceOfWL.Attr_AssignedDate);
                            resultOfinstanceOfWL.Add("PlannedDate", instanceOfWL.Attr_PlannedDate);
                            resultOfinstanceOfWL.Add("StartDate", instanceOfWL.Attr_StartDate);
                            resultOfinstanceOfWL.Add("EndDate", instanceOfWL.Attr_EndDate);
                            resultInstances.Add(resultOfinstanceOfWL);
                            break;
                    }
                }
                
            }

            return resultInstances;
        }

        public override string GetInstance(string classKeyLett, IDictionary<string, string> identities)
        {
            Dictionary<string, object> resultInstance = new Dictionary<string, object>();
            switch (classKeyLett)
            {
                case "AT":
                    DomainClassAT instanceOfAT = (DomainClassAT)domainModel.InstanceRepository.GetDomainInstances("AT").Where(selected => (((DomainClassAT)selected).Attr_MeasuringInstId == identities["MeasuringInstId"] && ((DomainClassAT)selected).Attr_AirConId == identities["AirConId"])).FirstOrDefault();
                    if (instanceOfAT != null)
                    {
                        resultInstance.Add("MeasuringInstId", instanceOfAT.Attr_MeasuringInstId);
                        resultInstance.Add("AirConId", instanceOfAT.Attr_AirConId);
                    }
                    break;
                case "MI":
                    DomainClassMI instanceOfMI = (DomainClassMI)domainModel.InstanceRepository.GetDomainInstances("MI").Where(selected => (((DomainClassMI)selected).Attr_MeasuringInstId == identities["MeasuringInstId"])).FirstOrDefault();
                    if (instanceOfMI != null)
                    {
                        resultInstance.Add("MeasuringInstId", instanceOfMI.Attr_MeasuringInstId);
                        resultInstance.Add("TargetRoomId", instanceOfMI.Attr_TargetRoomId);
                        resultInstance.Add("ModelName", instanceOfMI.Attr_ModelName);
                        resultInstance.Add("Environment", instanceOfMI.Attr_Environment);
                        resultInstance.Add("RequestInterval", instanceOfMI.Attr_RequestInterval);
                        resultInstance.Add("CurrentInterval", instanceOfMI.Attr_CurrentInterval);
                        resultInstance.Add("DeviceStatus", instanceOfMI.Attr_DeviceStatus);
                    }
                    break;
                case "R":
                    DomainClassR instanceOfR = (DomainClassR)domainModel.InstanceRepository.GetDomainInstances("R").Where(selected => (((DomainClassR)selected).Attr_RoomId == identities["RoomId"])).FirstOrDefault();
                    if (instanceOfR != null)
                    {
                        resultInstance.Add("RoomId", instanceOfR.Attr_RoomId);
                        resultInstance.Add("FloorId", instanceOfR.Attr_FloorId);
                        resultInstance.Add("RoomName", instanceOfR.Attr_RoomName);
                        resultInstance.Add("CurrentEnvironment", instanceOfR.Attr_CurrentEnvironment);
                        resultInstance.Add("PreferredEnvironment", instanceOfR.Attr_PreferredEnvironment);
                    }
                    break;
                case "F":
                    DomainClassF instanceOfF = (DomainClassF)domainModel.InstanceRepository.GetDomainInstances("F").Where(selected => (((DomainClassF)selected).Attr_FloorId == identities["FloorId"])).FirstOrDefault();
                    if (instanceOfF != null)
                    {
                        resultInstance.Add("BuildingId", instanceOfF.Attr_BuildingId);
                        resultInstance.Add("FloorNo", instanceOfF.Attr_FloorNo);
                        resultInstance.Add("FloorId", instanceOfF.Attr_FloorId);
                    }
                    break;
                case "B":
                    DomainClassB instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_BuildingId == identities["BuildingId"])).FirstOrDefault();
                    if (instanceOfB != null)
                    {
                        resultInstance.Add("BuildingId", instanceOfB.Attr_BuildingId);
                        resultInstance.Add("Name", instanceOfB.Attr_Name);
                        resultInstance.Add("Address", instanceOfB.Attr_Address);
                    }
                    break;
                case "AC":
                    DomainClassAC instanceOfAC = (DomainClassAC)domainModel.InstanceRepository.GetDomainInstances("AC").Where(selected => (((DomainClassAC)selected).Attr_AirConId == identities["AirConId"])).FirstOrDefault();
                    if (instanceOfAC != null)
                    {
                        resultInstance.Add("AirConId", instanceOfAC.Attr_AirConId);
                        resultInstance.Add("TargetRoomId", instanceOfAC.Attr_TargetRoomId);
                        resultInstance.Add("ModelName", instanceOfAC.Attr_ModelName);
                        resultInstance.Add("PowerState", instanceOfAC.Attr_PowerState);
                        resultInstance.Add("PowerWatts", instanceOfAC.Attr_PowerWatts);
                        resultInstance.Add("CurrentState", instanceOfAC.Attr_CurrentState);
                    }
                    break;
                case "CE":
                    DomainClassCE instanceOfCE = (DomainClassCE)domainModel.InstanceRepository.GetDomainInstances("CE").Where(selected => (((DomainClassCE)selected).Attr_CustomerEngineerId == identities["CustomerEngineerId"])).FirstOrDefault();
                    if (instanceOfCE != null)
                    {
                        resultInstance.Add("CustomerEngineerId", instanceOfCE.Attr_CustomerEngineerId);
                        resultInstance.Add("Name", instanceOfCE.Attr_Name);
                    }
                    break;
                case "CS":
                    DomainClassCS instanceOfCS = (DomainClassCS)domainModel.InstanceRepository.GetDomainInstances("CS").Where(selected => (((DomainClassCS)selected).Attr_CustomerId == identities["CustomerId"])).FirstOrDefault();
                    if (instanceOfCS != null)
                    {
                        resultInstance.Add("CustomerId", instanceOfCS.Attr_CustomerId);
                        resultInstance.Add("CustomerCode", instanceOfCS.Attr_CustomerCode);
                        resultInstance.Add("Name", instanceOfCS.Attr_Name);
                    }
                    break;
                case "LC":
                    DomainClassLC instanceOfLC = (DomainClassLC)domainModel.InstanceRepository.GetDomainInstances("LC").Where(selected => (((DomainClassLC)selected).Attr_CustomerId == identities["CustomerId"] && ((DomainClassLC)selected).Attr_RoomId == identities["RoomId"])).FirstOrDefault();
                    if (instanceOfLC != null)
                    {
                        resultInstance.Add("CustomerId", instanceOfLC.Attr_CustomerId);
                        resultInstance.Add("RoomId", instanceOfLC.Attr_RoomId);
                        resultInstance.Add("ContructNumber", instanceOfLC.Attr_ContructNumber);
                    }
                    break;
                case "WA":
                    DomainClassWA instanceOfWA = (DomainClassWA)domainModel.InstanceRepository.GetDomainInstances("WA").Where(selected => (((DomainClassWA)selected).Attr_WorkloadId == identities["WorkloadId"] && ((DomainClassWA)selected).Attr_CustomerEngineerId == identities["CustomerEngineerId"])).FirstOrDefault();
                    if (instanceOfWA != null)
                    {
                        resultInstance.Add("WorkloadId", instanceOfWA.Attr_WorkloadId);
                        resultInstance.Add("CustomerEngineerId", instanceOfWA.Attr_CustomerEngineerId);
                    }
                    break;
                case "WL":
                    DomainClassWL instanceOfWL = (DomainClassWL)domainModel.InstanceRepository.GetDomainInstances("WL").Where(selected => (((DomainClassWL)selected).Attr_WorkloadId == identities["WorkloadId"])).FirstOrDefault();
                    if (instanceOfWL != null)
                    {
                        resultInstance.Add("WorkloadId", instanceOfWL.Attr_WorkloadId);
                        resultInstance.Add("TargetRoomId", instanceOfWL.Attr_TargetRoomId);
                        resultInstance.Add("CurrentStatus", instanceOfWL.Attr_CurrentStatus);
                        resultInstance.Add("OccurrenceDate", instanceOfWL.Attr_OccurrenceDate);
                        resultInstance.Add("AssignedDate", instanceOfWL.Attr_AssignedDate);
                        resultInstance.Add("PlannedDate", instanceOfWL.Attr_PlannedDate);
                        resultInstance.Add("StartDate", instanceOfWL.Attr_StartDate);
                        resultInstance.Add("EndDate", instanceOfWL.Attr_EndDate);
                    }
                    break;
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstance);
        }

        public override string GetLinkedInstances(string classKeyLett, IDictionary<string, string> identities, string relName)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Links.ContainsKey(relName))
                {
                    switch (classKeyLett)
                    {
                        case "AT":
                            DomainClassAT instanceOfAT = (DomainClassAT)domainModel.InstanceRepository.GetDomainInstances("AT").Where(selected => (((DomainClassAT)selected).Attr_MeasuringInstId == identities["MeasuringInstId"] && ((DomainClassAT)selected).Attr_AirConId == identities["AirConId"])).FirstOrDefault();
                            if (instanceOfAT != null)
                            {
                                switch (relName)
                                {
                                    case "MI[R6]":
                                        var linkedInstanceOfR6OneMI = instanceOfAT.LinkedR6One();
                                        if (linkedInstanceOfR6OneMI != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MeasuringInstId", linkedInstanceOfR6OneMI.Attr_MeasuringInstId },
                                                { "TargetRoomId", linkedInstanceOfR6OneMI.Attr_TargetRoomId },
                                                { "ModelName", linkedInstanceOfR6OneMI.Attr_ModelName },
                                                { "Environment", linkedInstanceOfR6OneMI.Attr_Environment },
                                                { "RequestInterval", linkedInstanceOfR6OneMI.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR6OneMI.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR6OneMI.Attr_DeviceStatus }
                                            });
                                        }
                                        break;
                                    case "AC[R6.'affect']":
                                        var linkedInstanceOfR6OtherAffectAC = instanceOfAT.LinkedR6OtherAffect();
                                        if (linkedInstanceOfR6OtherAffectAC != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "AirConId", linkedInstanceOfR6OtherAffectAC.Attr_AirConId },
                                                { "TargetRoomId", linkedInstanceOfR6OtherAffectAC.Attr_TargetRoomId },
                                                { "ModelName", linkedInstanceOfR6OtherAffectAC.Attr_ModelName },
                                                { "PowerState", linkedInstanceOfR6OtherAffectAC.Attr_PowerState },
                                                { "PowerWatts", linkedInstanceOfR6OtherAffectAC.Attr_PowerWatts },
                                                { "CurrentState", linkedInstanceOfR6OtherAffectAC.Attr_CurrentState }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "MI":
                            DomainClassMI instanceOfMI = (DomainClassMI)domainModel.InstanceRepository.GetDomainInstances("MI").Where(selected => (((DomainClassMI)selected).Attr_MeasuringInstId == identities["MeasuringInstId"])).FirstOrDefault();
                            if (instanceOfMI != null)
                            {
                                switch (relName)
                                {
                                    case "AT[R6]":
                                        var linkedInstancesOfR6OneAT = instanceOfMI.LinkedR6OtherAffect();
                                        foreach (var linkedInstanceOfR6OneAT in linkedInstancesOfR6OneAT)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MeasuringInstId", linkedInstanceOfR6OneAT.Attr_MeasuringInstId },
                                                { "AirConId", linkedInstanceOfR6OneAT.Attr_AirConId }
                                            });
                                        }
                                        break;
                                    case "R[R3.'measuaring']":
                                        var linkedInstanceOfR3MeasuaringR = instanceOfMI.LinkedR3Measuaring();
                                        if (linkedInstanceOfR3MeasuaringR != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RoomId", linkedInstanceOfR3MeasuaringR.Attr_RoomId },
                                                { "FloorId", linkedInstanceOfR3MeasuaringR.Attr_FloorId },
                                                { "RoomName", linkedInstanceOfR3MeasuaringR.Attr_RoomName },
                                                { "CurrentEnvironment", linkedInstanceOfR3MeasuaringR.Attr_CurrentEnvironment },
                                                { "PreferredEnvironment", linkedInstanceOfR3MeasuaringR.Attr_PreferredEnvironment }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "R":
                            DomainClassR instanceOfR = (DomainClassR)domainModel.InstanceRepository.GetDomainInstances("R").Where(selected => (((DomainClassR)selected).Attr_RoomId == identities["RoomId"])).FirstOrDefault();
                            if (instanceOfR != null)
                            {
                                switch (relName)
                                {
                                    case "MI[R3]":
                                        var linkedInstancesOfR3MI = instanceOfR.LinkedR3();
                                        foreach (var linkedInstanceOfR3MI in linkedInstancesOfR3MI)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MeasuringInstId", linkedInstanceOfR3MI.Attr_MeasuringInstId },
                                                { "TargetRoomId", linkedInstanceOfR3MI.Attr_TargetRoomId },
                                                { "ModelName", linkedInstanceOfR3MI.Attr_ModelName },
                                                { "Environment", linkedInstanceOfR3MI.Attr_Environment },
                                                { "RequestInterval", linkedInstanceOfR3MI.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR3MI.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR3MI.Attr_DeviceStatus }
                                            });
                                        }
                                        break;
                                    case "AC[R4.'installed']":
                                        var linkedInstancesOfR4InstalledAC = instanceOfR.LinkedR4Installed();
                                        foreach (var linkedInstanceOfR4InstalledAC in linkedInstancesOfR4InstalledAC)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "AirConId", linkedInstanceOfR4InstalledAC.Attr_AirConId },
                                                { "TargetRoomId", linkedInstanceOfR4InstalledAC.Attr_TargetRoomId },
                                                { "ModelName", linkedInstanceOfR4InstalledAC.Attr_ModelName },
                                                { "PowerState", linkedInstanceOfR4InstalledAC.Attr_PowerState },
                                                { "PowerWatts", linkedInstanceOfR4InstalledAC.Attr_PowerWatts },
                                                { "CurrentState", linkedInstanceOfR4InstalledAC.Attr_CurrentState }
                                            });
                                        }
                                        break;
                                    case "WL[R5]":
                                        var linkedInstanceOfR5WL = instanceOfR.LinkedR5();
                                        if (linkedInstanceOfR5WL != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "WorkloadId", linkedInstanceOfR5WL.Attr_WorkloadId },
                                                { "TargetRoomId", linkedInstanceOfR5WL.Attr_TargetRoomId },
                                                { "CurrentStatus", linkedInstanceOfR5WL.Attr_CurrentStatus },
                                                { "OccurrenceDate", linkedInstanceOfR5WL.Attr_OccurrenceDate },
                                                { "AssignedDate", linkedInstanceOfR5WL.Attr_AssignedDate },
                                                { "PlannedDate", linkedInstanceOfR5WL.Attr_PlannedDate },
                                                { "StartDate", linkedInstanceOfR5WL.Attr_StartDate },
                                                { "EndDate", linkedInstanceOfR5WL.Attr_EndDate }
                                            });
                                        }
                                        break;
                                    case "LC[R8]":
                                        var linkedInstanceOfR8OtherLC = instanceOfR.LinkedR8One();
                                        if (linkedInstanceOfR8OtherLC != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "CustomerId", linkedInstanceOfR8OtherLC.Attr_CustomerId },
                                                { "RoomId", linkedInstanceOfR8OtherLC.Attr_RoomId },
                                                { "ContructNumber", linkedInstanceOfR8OtherLC.Attr_ContructNumber }
                                            });
                                        }
                                        break;
                                    case "F[R2]":
                                        var linkedInstanceOfR2F = instanceOfR.LinkedR2();
                                        if (linkedInstanceOfR2F != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "BuildingId", linkedInstanceOfR2F.Attr_BuildingId },
                                                { "FloorNo", linkedInstanceOfR2F.Attr_FloorNo },
                                                { "FloorId", linkedInstanceOfR2F.Attr_FloorId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "F":
                            DomainClassF instanceOfF = (DomainClassF)domainModel.InstanceRepository.GetDomainInstances("F").Where(selected => (((DomainClassF)selected).Attr_FloorId == identities["FloorId"])).FirstOrDefault();
                            if (instanceOfF != null)
                            {
                                switch (relName)
                                {
                                    case "B[R1]":
                                        var linkedInstanceOfR1B = instanceOfF.LinkedR1();
                                        if (linkedInstanceOfR1B != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "BuildingId", linkedInstanceOfR1B.Attr_BuildingId },
                                                { "Name", linkedInstanceOfR1B.Attr_Name },
                                                { "Address", linkedInstanceOfR1B.Attr_Address }
                                            });
                                        }
                                        break;
                                    case "R[R2]":
                                        var linkedInstancesOfR2R = instanceOfF.LinkedR2();
                                        foreach (var linkedInstanceOfR2R in linkedInstancesOfR2R)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RoomId", linkedInstanceOfR2R.Attr_RoomId },
                                                { "FloorId", linkedInstanceOfR2R.Attr_FloorId },
                                                { "RoomName", linkedInstanceOfR2R.Attr_RoomName },
                                                { "CurrentEnvironment", linkedInstanceOfR2R.Attr_CurrentEnvironment },
                                                { "PreferredEnvironment", linkedInstanceOfR2R.Attr_PreferredEnvironment }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "B":
                            DomainClassB instanceOfB = (DomainClassB)domainModel.InstanceRepository.GetDomainInstances("B").Where(selected => (((DomainClassB)selected).Attr_BuildingId == identities["BuildingId"])).FirstOrDefault();
                            if (instanceOfB != null)
                            {
                                switch (relName)
                                {
                                    case "F[R1]":
                                        var linkedInstancesOfR1F = instanceOfB.LinkedR1();
                                        foreach (var linkedInstanceOfR1F in linkedInstancesOfR1F)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "BuildingId", linkedInstanceOfR1F.Attr_BuildingId },
                                                { "FloorNo", linkedInstanceOfR1F.Attr_FloorNo },
                                                { "FloorId", linkedInstanceOfR1F.Attr_FloorId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "AC":
                            DomainClassAC instanceOfAC = (DomainClassAC)domainModel.InstanceRepository.GetDomainInstances("AC").Where(selected => (((DomainClassAC)selected).Attr_AirConId == identities["AirConId"])).FirstOrDefault();
                            if (instanceOfAC != null)
                            {
                                switch (relName)
                                {
                                    case "AT[R6.'affect']":
                                        var linkedInstanceOfR6OtherAffectAT = instanceOfAC.LinkedR6One();
                                        if (linkedInstanceOfR6OtherAffectAT != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MeasuringInstId", linkedInstanceOfR6OtherAffectAT.Attr_MeasuringInstId },
                                                { "AirConId", linkedInstanceOfR6OtherAffectAT.Attr_AirConId }
                                            });
                                        }
                                        break;
                                    case "R[R4]":
                                        var linkedInstanceOfR4R = instanceOfAC.LinkedR4();
                                        if (linkedInstanceOfR4R != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RoomId", linkedInstanceOfR4R.Attr_RoomId },
                                                { "FloorId", linkedInstanceOfR4R.Attr_FloorId },
                                                { "RoomName", linkedInstanceOfR4R.Attr_RoomName },
                                                { "CurrentEnvironment", linkedInstanceOfR4R.Attr_CurrentEnvironment },
                                                { "PreferredEnvironment", linkedInstanceOfR4R.Attr_PreferredEnvironment }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "CE":
                            DomainClassCE instanceOfCE = (DomainClassCE)domainModel.InstanceRepository.GetDomainInstances("CE").Where(selected => (((DomainClassCE)selected).Attr_CustomerEngineerId == identities["CustomerEngineerId"])).FirstOrDefault();
                            if (instanceOfCE != null)
                            {
                                switch (relName)
                                {
                                    case "WA[R7.'responsible person']":
                                        var linkedInstanceOfR7OtherResponsiblePersonWA = instanceOfCE.LinkedR7OneContract();
                                        if (linkedInstanceOfR7OtherResponsiblePersonWA != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "WorkloadId", linkedInstanceOfR7OtherResponsiblePersonWA.Attr_WorkloadId },
                                                { "CustomerEngineerId", linkedInstanceOfR7OtherResponsiblePersonWA.Attr_CustomerEngineerId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "CS":
                            DomainClassCS instanceOfCS = (DomainClassCS)domainModel.InstanceRepository.GetDomainInstances("CS").Where(selected => (((DomainClassCS)selected).Attr_CustomerId == identities["CustomerId"])).FirstOrDefault();
                            if (instanceOfCS != null)
                            {
                                switch (relName)
                                {
                                    case "LC[R8]":
                                        var linkedInstancesOfR8OneLC = instanceOfCS.LinkedR8Other();
                                        foreach (var linkedInstanceOfR8OneLC in linkedInstancesOfR8OneLC)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "CustomerId", linkedInstanceOfR8OneLC.Attr_CustomerId },
                                                { "RoomId", linkedInstanceOfR8OneLC.Attr_RoomId },
                                                { "ContructNumber", linkedInstanceOfR8OneLC.Attr_ContructNumber }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "LC":
                            DomainClassLC instanceOfLC = (DomainClassLC)domainModel.InstanceRepository.GetDomainInstances("LC").Where(selected => (((DomainClassLC)selected).Attr_CustomerId == identities["CustomerId"] && ((DomainClassLC)selected).Attr_RoomId == identities["RoomId"])).FirstOrDefault();
                            if (instanceOfLC != null)
                            {
                                switch (relName)
                                {
                                    case "CS[R8]":
                                        var linkedInstanceOfR8OneCS = instanceOfLC.LinkedR8One();
                                        if (linkedInstanceOfR8OneCS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "CustomerId", linkedInstanceOfR8OneCS.Attr_CustomerId },
                                                { "CustomerCode", linkedInstanceOfR8OneCS.Attr_CustomerCode },
                                                { "Name", linkedInstanceOfR8OneCS.Attr_Name }
                                            });
                                        }
                                        break;
                                    case "R[R8]":
                                        var linkedInstanceOfR8OtherR = instanceOfLC.LinkedR8Other();
                                        if (linkedInstanceOfR8OtherR != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RoomId", linkedInstanceOfR8OtherR.Attr_RoomId },
                                                { "FloorId", linkedInstanceOfR8OtherR.Attr_FloorId },
                                                { "RoomName", linkedInstanceOfR8OtherR.Attr_RoomName },
                                                { "CurrentEnvironment", linkedInstanceOfR8OtherR.Attr_CurrentEnvironment },
                                                { "PreferredEnvironment", linkedInstanceOfR8OtherR.Attr_PreferredEnvironment }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "WA":
                            DomainClassWA instanceOfWA = (DomainClassWA)domainModel.InstanceRepository.GetDomainInstances("WA").Where(selected => (((DomainClassWA)selected).Attr_WorkloadId == identities["WorkloadId"] && ((DomainClassWA)selected).Attr_CustomerEngineerId == identities["CustomerEngineerId"])).FirstOrDefault();
                            if (instanceOfWA != null)
                            {
                                switch (relName)
                                {
                                    case "WL[R7.'contract']":
                                        var linkedInstanceOfR7OneContractWL = instanceOfWA.LinkedR7OneContract();
                                        if (linkedInstanceOfR7OneContractWL != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "WorkloadId", linkedInstanceOfR7OneContractWL.Attr_WorkloadId },
                                                { "TargetRoomId", linkedInstanceOfR7OneContractWL.Attr_TargetRoomId },
                                                { "CurrentStatus", linkedInstanceOfR7OneContractWL.Attr_CurrentStatus },
                                                { "OccurrenceDate", linkedInstanceOfR7OneContractWL.Attr_OccurrenceDate },
                                                { "AssignedDate", linkedInstanceOfR7OneContractWL.Attr_AssignedDate },
                                                { "PlannedDate", linkedInstanceOfR7OneContractWL.Attr_PlannedDate },
                                                { "StartDate", linkedInstanceOfR7OneContractWL.Attr_StartDate },
                                                { "EndDate", linkedInstanceOfR7OneContractWL.Attr_EndDate }
                                            });
                                        }
                                        break;
                                    case "CE[R7.'responsible person']":
                                        var linkedInstanceOfR7OtherResponsiblePersonCE = instanceOfWA.LinkedR7OtherResponsiblePerson();
                                        if (linkedInstanceOfR7OtherResponsiblePersonCE != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "CustomerEngineerId", linkedInstanceOfR7OtherResponsiblePersonCE.Attr_CustomerEngineerId },
                                                { "Name", linkedInstanceOfR7OtherResponsiblePersonCE.Attr_Name }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "WL":
                            DomainClassWL instanceOfWL = (DomainClassWL)domainModel.InstanceRepository.GetDomainInstances("WL").Where(selected => (((DomainClassWL)selected).Attr_WorkloadId == identities["WorkloadId"])).FirstOrDefault();
                            if (instanceOfWL != null)
                            {
                                switch (relName)
                                {
                                    case "WA[R7.'contract']":
                                        var linkedInstanceOfR7OneContractWA = instanceOfWL.LinkedR7OtherResponsiblePerson();
                                        if (linkedInstanceOfR7OneContractWA != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "WorkloadId", linkedInstanceOfR7OneContractWA.Attr_WorkloadId },
                                                { "CustomerEngineerId", linkedInstanceOfR7OneContractWA.Attr_CustomerEngineerId }
                                            });
                                        }
                                        break;
                                    case "R[R5.'target']":
                                        var linkedInstanceOfR5TargetR = instanceOfWL.LinkedR5Target();
                                        if (linkedInstanceOfR5TargetR != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RoomId", linkedInstanceOfR5TargetR.Attr_RoomId },
                                                { "FloorId", linkedInstanceOfR5TargetR.Attr_FloorId },
                                                { "RoomName", linkedInstanceOfR5TargetR.Attr_RoomName },
                                                { "CurrentEnvironment", linkedInstanceOfR5TargetR.Attr_CurrentEnvironment },
                                                { "PreferredEnvironment", linkedInstanceOfR5TargetR.Attr_PreferredEnvironment }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetDomainOperationsSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(domainOpsParamSpecs);
            return result;
        }

        public override string GetClassesSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(classSpecs);
            return result; 
        }

        public override string GetDomainModelSpec()
        {
            var spec = new {
                name = "BuildingManagement",
                operations = domainOpsParamSpecs,
                classes = classSpecs
            };
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(spec);
            return result;
        }

        public override void RegisterUpdateHandler(ClassPropertiesUpdateHandler classPropertiesUpdateHandler, RelationshipUpdateHandler relationshipUpdateHandler)
        {
            domainModel.InstanceRepository.ClassPropertiesUpdated += classPropertiesUpdateHandler;
            domainModel.InstanceRepository.RelationshipUpdated += relationshipUpdateHandler;
        }

        public override void LoadDomainInstances(string instances)
        {
            string domainName = "BuildingManagement";
            var instancesJson = Newtonsoft.Json.JsonConvert.DeserializeObject<IDictionary<string, IList<IDictionary<string, object>>>>(instances);
            domainModel.InstanceRepository.LoadState(domainName, instancesJson);
        }

        public override string SaveDomainInstances()
        {
            Dictionary<string, List<Dictionary<string, object>>> instances = new Dictionary<string, List<Dictionary<string, object>>>();
            foreach(var ck in classSpecs.Keys)
            {
                var classInstances = GetInstancesRaw(ck);
                if (classInstances.Count > 0)
                {
                    instances.Add(ck, classInstances);
                }
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(instances);
        }
    }
}
