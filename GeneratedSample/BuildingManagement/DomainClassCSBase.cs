// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace BuildingManagement
{
    public partial class DomainClassCSBase : DomainClassCS
    {
        protected static readonly string className = "CS";

        public string DomainName { get { return CIMBuildingManagementLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"CustomerId={attr_CustomerId}"; }

        public static DomainClassCSBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassCSBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CS(CustomerId={newInstance.Attr_CustomerId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassCSBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_CustomerId = Guid.NewGuid().ToString();
        }
        protected string attr_CustomerId;
        protected bool stateof_CustomerId = false;

        protected string attr_CustomerCode;
        protected bool stateof_CustomerCode = false;

        protected string attr_Name;
        protected bool stateof_Name = false;

        public string Attr_CustomerId { get { return attr_CustomerId; } set { attr_CustomerId = value; stateof_CustomerId = true; } }
        public string Attr_CustomerCode { get { return attr_CustomerCode; } set { attr_CustomerCode = value; stateof_CustomerCode = true; } }
        public string Attr_Name { get { return attr_Name; } set { attr_Name = value; stateof_Name = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassCS instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "CustomerId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_CustomerId)
                        {
                            result = false;
                        }
                        break;
                    case "CustomerCode":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_CustomerCode)
                        {
                            result = false;
                        }
                        break;
                    case "Name":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Name)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        public IEnumerable<DomainClassLC> LinkedR8Other()
        {
            var result = new List<DomainClassLC>();
            var candidates = instanceRepository.GetDomainInstances("LC").Where(inst=>(this.Attr_CustomerId==((DomainClassLC)inst).Attr_CustomerId));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "LC", "R8_", candidates, () => { return DomainClassLCBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassLC)c).LinkedR8One();
                result.Add((DomainClassLC)c);
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:CS(CustomerId={this.Attr_CustomerId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("CustomerId"))
            {
                attr_CustomerId = (string)propertyValues["CustomerId"];
            }
            stateof_CustomerId = false;
            if (propertyValues.ContainsKey("CustomerCode"))
            {
                attr_CustomerCode = (string)propertyValues["CustomerCode"];
            }
            stateof_CustomerCode = false;
            if (propertyValues.ContainsKey("Name"))
            {
                attr_Name = (string)propertyValues["Name"];
            }
            stateof_Name = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_CustomerId)
            {
                results.Add("CustomerId", attr_CustomerId);
                stateof_CustomerId = false;
            }
            if (stateof_CustomerCode)
            {
                results.Add("CustomerCode", attr_CustomerCode);
                stateof_CustomerCode = false;
            }
            if (stateof_Name)
            {
                results.Add("Name", attr_Name);
                stateof_Name = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"CustomerId={this.Attr_CustomerId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("CustomerId", attr_CustomerId);
            results.Add("CustomerCode", attr_CustomerCode);
            if (!onlyIdentity) results.Add("Name", attr_Name);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
