// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace BuildingManagement
{
    public partial class DomainClassATBase : DomainClassAT
    {
        protected static readonly string className = "AT";

        public string DomainName { get { return CIMBuildingManagementLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"MeasuringInstId={attr_MeasuringInstId};AirConId={attr_AirConId}"; }

        public static DomainClassATBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassATBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AT(MeasuringInstId={newInstance.Attr_MeasuringInstId},AirConId={newInstance.Attr_AirConId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassATBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
        }
        protected string attr_MeasuringInstId;
        protected bool stateof_MeasuringInstId = false;

        protected string attr_AirConId;
        protected bool stateof_AirConId = false;

        public string Attr_MeasuringInstId { get { return attr_MeasuringInstId; } }
        public string Attr_AirConId { get { return attr_AirConId; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassAT instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "MeasuringInstId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_MeasuringInstId)
                        {
                            result = false;
                        }
                        break;
                    case "AirConId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_AirConId)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR6MI;
        // private DomainClassMI relR6MI;
        protected LinkedInstance relR6ACAffect;
        // private DomainClassAC relR6ACAffect;
        public bool LinkR6(DomainClassMI oneInstance, DomainClassAC otherInstanceAffect, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR6MI == null && relR6ACAffect == null)
            {
                this.attr_MeasuringInstId = oneInstance.Attr_MeasuringInstId;
                this.stateof_MeasuringInstId = true;
                this.attr_AirConId = otherInstanceAffect.Attr_AirConId;
                this.stateof_AirConId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AT(MeasuringInstId={this.Attr_MeasuringInstId},AirConId={this.Attr_AirConId}):link[One(MI(MeasuringInstId={oneInstance.Attr_MeasuringInstId})),Other(AC(AirConId={otherInstanceAffect.Attr_AirConId}))]");

                result = (LinkedR6One()!=null) && (LinkedR6OtherAffect()!=null);
                if (result)
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR6MI });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR6ACAffect });
                    }
                }
            }
            return result;
        }
        
        public bool UnlinkR6(DomainClassMI oneInstance, DomainClassAC otherInstanceAffect, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR6MI != null && relR6ACAffect != null)
            {
                if ((this.Attr_MeasuringInstId==oneInstance.Attr_MeasuringInstId) && (this.Attr_AirConId==otherInstanceAffect.Attr_AirConId))
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR6MI });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR6ACAffect });
                    }
        
                    this.attr_MeasuringInstId = null;
                    this.stateof_MeasuringInstId = true;
                    this.attr_AirConId = null;
                    this.stateof_AirConId = true;
                    relR6MI = null;
                    relR6ACAffect = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AT(MeasuringInstId={this.Attr_MeasuringInstId},AirConId={this.Attr_AirConId}):unlink[MI(MeasuringInstId={oneInstance.Attr_MeasuringInstId})]");

                    result = true;
                }
            }
            return result;
        }
        
        public DomainClassMI LinkedR6One()
        {
            if (relR6MI == null)
            {
                var candidates = instanceRepository.GetDomainInstances("MI").Where(inst=>(this.Attr_MeasuringInstId==((DomainClassMI)inst).Attr_MeasuringInstId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "MI", "R6_", candidates, () => { return DomainClassMIBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR6MI = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R6", Phrase = "" };
                // (DomainClassMI)candidates.FirstOrDefault();
            }
            return relR6MI.GetDestination<DomainClassMI>();
        }
        
        public DomainClassAC LinkedR6OtherAffect()
        {
            if (relR6ACAffect == null)
            {
                var candidates = instanceRepository.GetDomainInstances("AC").Where(inst=>(this.Attr_AirConId==((DomainClassAC)inst).Attr_AirConId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "AC", "R6_Affect", candidates, () => { return DomainClassACBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR6ACAffect = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R6", Phrase = "Affect" };
                // (DomainClassAC)candidates.FirstOrDefault();
            }
            return relR6ACAffect.GetDestination<DomainClassAC>();
        }



        
        public bool Validate()
        {
            bool isValid = true;
            if (relR6MI == null)
            {
                isValid = false;
            }
            if (relR6ACAffect == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:AT(MeasuringInstId={this.Attr_MeasuringInstId},AirConId={this.Attr_AirConId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("MeasuringInstId"))
            {
                attr_MeasuringInstId = (string)propertyValues["MeasuringInstId"];
            }
            stateof_MeasuringInstId = false;
            if (propertyValues.ContainsKey("AirConId"))
            {
                attr_AirConId = (string)propertyValues["AirConId"];
            }
            stateof_AirConId = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_MeasuringInstId)
            {
                results.Add("MeasuringInstId", attr_MeasuringInstId);
                stateof_MeasuringInstId = false;
            }
            if (stateof_AirConId)
            {
                results.Add("AirConId", attr_AirConId);
                stateof_AirConId = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"MeasuringInstId={this.Attr_MeasuringInstId},AirConId={this.Attr_AirConId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("MeasuringInstId", attr_MeasuringInstId);
            if (!onlyIdentity) results.Add("AirConId", attr_AirConId);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
