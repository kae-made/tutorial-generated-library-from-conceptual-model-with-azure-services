// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace BuildingManagement
{
    public partial class DomainClassWABase : DomainClassWA
    {
        protected static readonly string className = "WA";

        public string DomainName { get { return CIMBuildingManagementLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"WorkloadId={attr_WorkloadId};CustomerEngineerId={attr_CustomerEngineerId}"; }

        public static DomainClassWABase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassWABase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WA(WorkloadId={newInstance.Attr_WorkloadId},CustomerEngineerId={newInstance.Attr_CustomerEngineerId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassWABase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
        }
        protected string attr_WorkloadId;
        protected bool stateof_WorkloadId = false;

        protected string attr_CustomerEngineerId;
        protected bool stateof_CustomerEngineerId = false;

        public string Attr_WorkloadId { get { return attr_WorkloadId; } }
        public string Attr_CustomerEngineerId { get { return attr_CustomerEngineerId; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassWA instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "WorkloadId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_WorkloadId)
                        {
                            result = false;
                        }
                        break;
                    case "CustomerEngineerId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_CustomerEngineerId)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR7WLContract;
        // private DomainClassWL relR7WLContract;
        protected LinkedInstance relR7CEResponsiblePerson;
        // private DomainClassCE relR7CEResponsiblePerson;
        public bool LinkR7(DomainClassWL oneInstanceContract, DomainClassCE otherInstanceResponsiblePerson, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR7WLContract == null && relR7CEResponsiblePerson == null)
            {
                this.attr_WorkloadId = oneInstanceContract.Attr_WorkloadId;
                this.stateof_WorkloadId = true;
                this.attr_CustomerEngineerId = otherInstanceResponsiblePerson.Attr_CustomerEngineerId;
                this.stateof_CustomerEngineerId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WA(WorkloadId={this.Attr_WorkloadId},CustomerEngineerId={this.Attr_CustomerEngineerId}):link[One(WL(WorkloadId={oneInstanceContract.Attr_WorkloadId})),Other(CE(CustomerEngineerId={otherInstanceResponsiblePerson.Attr_CustomerEngineerId}))]");

                result = (LinkedR7OneContract()!=null) && (LinkedR7OtherResponsiblePerson()!=null);
                if (result)
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR7WLContract });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR7CEResponsiblePerson });
                    }
                }
            }
            return result;
        }
        
        public bool UnlinkR7(DomainClassWL oneInstanceContract, DomainClassCE otherInstanceResponsiblePerson, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR7WLContract != null && relR7CEResponsiblePerson != null)
            {
                if ((this.Attr_WorkloadId==oneInstanceContract.Attr_WorkloadId) && (this.Attr_CustomerEngineerId==otherInstanceResponsiblePerson.Attr_CustomerEngineerId))
                {
                    if (changedStates != null)
                    {
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR7WLContract });
                        changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR7CEResponsiblePerson });
                    }
        
                    this.attr_WorkloadId = null;
                    this.stateof_WorkloadId = true;
                    this.attr_CustomerEngineerId = null;
                    this.stateof_CustomerEngineerId = true;
                    relR7WLContract = null;
                    relR7CEResponsiblePerson = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WA(WorkloadId={this.Attr_WorkloadId},CustomerEngineerId={this.Attr_CustomerEngineerId}):unlink[WL(WorkloadId={oneInstanceContract.Attr_WorkloadId})]");

                    result = true;
                }
            }
            return result;
        }
        
        public DomainClassWL LinkedR7OneContract()
        {
            if (relR7WLContract == null)
            {
                var candidates = instanceRepository.GetDomainInstances("WL").Where(inst=>(this.Attr_WorkloadId==((DomainClassWL)inst).Attr_WorkloadId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "WL", "R7_Contract", candidates, () => { return DomainClassWLBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR7WLContract = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R7", Phrase = "Contract" };
                // (DomainClassWL)candidates.FirstOrDefault();
            }
            return relR7WLContract.GetDestination<DomainClassWL>();
        }
        
        public DomainClassCE LinkedR7OtherResponsiblePerson()
        {
            if (relR7CEResponsiblePerson == null)
            {
                var candidates = instanceRepository.GetDomainInstances("CE").Where(inst=>(this.Attr_CustomerEngineerId==((DomainClassCE)inst).Attr_CustomerEngineerId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "CE", "R7_ResponsiblePerson", candidates, () => { return DomainClassCEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR7CEResponsiblePerson = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R7", Phrase = "ResponsiblePerson" };
                // (DomainClassCE)candidates.FirstOrDefault();
            }
            return relR7CEResponsiblePerson.GetDestination<DomainClassCE>();
        }



        
        public bool Validate()
        {
            bool isValid = true;
            if (relR7WLContract == null)
            {
                isValid = false;
            }
            if (relR7CEResponsiblePerson == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WA(WorkloadId={this.Attr_WorkloadId},CustomerEngineerId={this.Attr_CustomerEngineerId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("WorkloadId"))
            {
                attr_WorkloadId = (string)propertyValues["WorkloadId"];
            }
            stateof_WorkloadId = false;
            if (propertyValues.ContainsKey("CustomerEngineerId"))
            {
                attr_CustomerEngineerId = (string)propertyValues["CustomerEngineerId"];
            }
            stateof_CustomerEngineerId = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_WorkloadId)
            {
                results.Add("WorkloadId", attr_WorkloadId);
                stateof_WorkloadId = false;
            }
            if (stateof_CustomerEngineerId)
            {
                results.Add("CustomerEngineerId", attr_CustomerEngineerId);
                stateof_CustomerEngineerId = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"WorkloadId={this.Attr_WorkloadId},CustomerEngineerId={this.Attr_CustomerEngineerId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("WorkloadId", attr_WorkloadId);
            if (!onlyIdentity) results.Add("CustomerEngineerId", attr_CustomerEngineerId);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
