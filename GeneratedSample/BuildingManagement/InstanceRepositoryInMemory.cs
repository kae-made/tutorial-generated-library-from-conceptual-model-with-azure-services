// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace BuildingManagement
{
    public class InstanceRepositoryInMemory : InstanceRepository
    {
        private Logger logger;

        public override event ClassPropertiesUpdateHandler ClassPropertiesUpdated;
        public override event RelationshipUpdateHandler RelationshipUpdated;

        public InstanceRepositoryInMemory(Logger logger)
        {
            this.logger = logger;
        }

        public override void LoadState(string domainName, IDictionary<string, IList<IDictionary<string, object>>> instances)
        {
            // current edition doesn't support multi domain feature.
            foreach (var className in instances.Keys)
            {
                foreach (var states in instances[className])
                {
                    DomainClassDef newInstance = null;
                    switch (className)
                    {
                        case "AT":
                            newInstance = DomainClassATBase.CreateInstance(this, logger);
                            break;
                        case "MI":
                            newInstance = DomainClassMIBase.CreateInstance(this, logger);
                            break;
                        case "R":
                            newInstance = DomainClassRBase.CreateInstance(this, logger);
                            break;
                        case "F":
                            newInstance = DomainClassFBase.CreateInstance(this, logger);
                            break;
                        case "B":
                            newInstance = DomainClassBBase.CreateInstance(this, logger);
                            break;
                        case "AC":
                            newInstance = DomainClassACBase.CreateInstance(this, logger);
                            break;
                        case "CE":
                            newInstance = DomainClassCEBase.CreateInstance(this, logger);
                            break;
                        case "CS":
                            newInstance = DomainClassCSBase.CreateInstance(this, logger);
                            break;
                        case "LC":
                            newInstance = DomainClassLCBase.CreateInstance(this, logger);
                            break;
                        case "WA":
                            newInstance = DomainClassWABase.CreateInstance(this, logger);
                            break;
                        case "WL":
                            newInstance = DomainClassWLBase.CreateInstance(this, logger);
                            break;
                        default:
                            if (logger != null) logger.LogError($"{className} is not right domain class.");
                            break;
                    }
                    if (newInstance != null)
                    {
                        newInstance.Restore(states);
                    }
                }
            }
        }

        public override void UpdateCInstance(CInstanceChagedState instanceState)
        {
            ClassPropertiesUpdated?.Invoke(instanceState.Target, new ClassPropertiesUpdatedEventArgs() { Operation = instanceState.OP.ToString(), ClassKeyLetter = instanceState.Target.ClassName, Instance = instanceState.Target, Identities = instanceState.Target.GetIdentities(), Properties = instanceState.ChangedProperties });
        }

#if false
        public override void UpdateState(DomainClassDef instance, IDictionary<string, object> changed)
        {
            ClassPropertiesUpdated?.Invoke(instance, new ClassPropertiesUpdatedEventArgs() { Operation = ChangedState.Operation.Update.ToString(), ClassKeyLetter = instance.ClassName, Identities = instance.GetIdentities(), Properties = changed });
        }
#endif
        public override void UpdateCLink(CLinkChangedState linkState)
        {
            RelationshipUpdated?.Invoke(this, new RelationshipUpdatedEventArgs() { Operation = linkState.OP.ToString(), RelationshipId = linkState.Target.RelationshipID, Phrase = linkState.Target.Phrase, SourceClassKeyLetter = linkState.Target.Source.ClassName, SourceInstance=linkState.Target.Source, SourceIdentities = linkState.Target.Source.GetIdentities(), DestinationClassKeyLetter = linkState.Target.Destination.ClassName, DestinationInstance = linkState.Target.Destination, DestinationIdentities = linkState.Target.Destination.GetIdentities() });
        }

        public override IEnumerable<T> SelectInstances<T>(string className, IDictionary<string, object> conditionPropertyValues, Func<T, IDictionary<string, object>, bool> compare)
        {
            var resultSet = new List<T>();
            var candidates = domainInstances[className].Where(i => { return compare((T)i, conditionPropertyValues); });
            foreach (var ci in candidates)
            {
                resultSet.Add((T)ci);
            }
            return resultSet;
        }

    }

}
