// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;

namespace BuildingManagement
{

    public interface DomainClassAT : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_MeasuringInstId { get; }
        string Attr_AirConId { get; }


        // Relationships 

        public bool LinkR6(DomainClassMI oneInstance, DomainClassAC otherInstanceAffect, IList<ChangedState> changedStates=null);
        public bool UnlinkR6(DomainClassMI oneInstance, DomainClassAC otherInstanceAffect, IList<ChangedState> changedStates=null);
        public DomainClassMI LinkedR6One();
        public DomainClassAC LinkedR6OtherAffect();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassMI : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_MeasuringInstId { get; }
        string Attr_TargetRoomId { get; }
        string Attr_ModelName { get; set; }
        DomainTypeEnvironmentPhysicalQuantities Attr_Environment { get; set; }
        int Attr_RequestInterval { get; set; }
        int Attr_CurrentInterval { get; set; }
        string Attr_DeviceStatus { get; set; }


        // Relationships 

        public DomainClassR LinkedR3Measuaring();

        public bool LinkR3Measuaring(DomainClassR instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR3Measuaring(DomainClassR instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassAT> LinkedR6OtherAffect();


        // Conceptual Information Class's Operations

        public void Start();

        public void Stop();



    }

    public interface DomainClassR : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_RoomId { get; }
        string Attr_FloorId { get; }
        string Attr_RoomName { get; set; }
        DomainTypeEnvironmentPhysicalQuantities Attr_CurrentEnvironment { get; set; }
        DomainTypeEnvironmentPhysicalQuantities Attr_PreferredEnvironment { get; set; }


        // Relationships 

        public DomainClassF LinkedR2();

        public bool LinkR2(DomainClassF instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR2(DomainClassF instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassMI> LinkedR3();

        public IEnumerable<DomainClassAC> LinkedR4Installed();
        public DomainClassWL LinkedR5();

        public DomainClassLC LinkedR8One();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassF : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_BuildingId { get; }
        int Attr_FloorNo { get; set; }
        string Attr_FloorId { get; }


        // Relationships 

        public DomainClassB LinkedR1();

        public bool LinkR1(DomainClassB instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR1(DomainClassB instance, IList<ChangedState> changedStates=null);

        public IEnumerable<DomainClassR> LinkedR2();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassB : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_BuildingId { get; }
        string Attr_Name { get; set; }
        string Attr_Address { get; set; }


        // Relationships 


        public IEnumerable<DomainClassF> LinkedR1();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassAC : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_AirConId { get; }
        string Attr_TargetRoomId { get; }
        string Attr_ModelName { get; set; }
        bool Attr_PowerState { get; set; }
        double Attr_PowerWatts { get; set; }
        DomainTypeEquipmentsState Attr_CurrentState { get; set; }


        // Relationships 

        public DomainClassR LinkedR4();

        public bool LinkR4(DomainClassR instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR4(DomainClassR instance, IList<ChangedState> changedStates=null);

        public DomainClassAT LinkedR6One();


        // Conceptual Information Class's Operations

        public void Execute(string command);



    }

    public interface DomainClassCE : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_CustomerEngineerId { get; }
        string Attr_Name { get; set; }


        // Relationships 


        public DomainClassWA LinkedR7OneContract();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassCS : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_CustomerId { get; }
        string Attr_CustomerCode { get; set; }
        string Attr_Name { get; set; }


        // Relationships 


        public IEnumerable<DomainClassLC> LinkedR8Other();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassLC : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_CustomerId { get; }
        string Attr_RoomId { get; }
        string Attr_ContructNumber { get; set; }


        // Relationships 

        public bool LinkR8(DomainClassCS oneInstance, DomainClassR otherInstance, IList<ChangedState> changedStates=null);
        public bool UnlinkR8(DomainClassCS oneInstance, DomainClassR otherInstance, IList<ChangedState> changedStates=null);
        public DomainClassCS LinkedR8One();
        public DomainClassR LinkedR8Other();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWA : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_WorkloadId { get; }
        string Attr_CustomerEngineerId { get; }


        // Relationships 

        public bool LinkR7(DomainClassWL oneInstanceContract, DomainClassCE otherInstanceResponsiblePerson, IList<ChangedState> changedStates=null);
        public bool UnlinkR7(DomainClassWL oneInstanceContract, DomainClassCE otherInstanceResponsiblePerson, IList<ChangedState> changedStates=null);
        public DomainClassWL LinkedR7OneContract();
        public DomainClassCE LinkedR7OtherResponsiblePerson();


        // Conceptual Information Class's Operations



    }

    public interface DomainClassWL : DomainClassDef
    {
        // Conceptual Information Class's Properties

        string Attr_WorkloadId { get; }
        string Attr_TargetRoomId { get; }
        DomainTypeWorkloadState Attr_CurrentStatus { get; set; }
        DateTime Attr_OccurrenceDate { get; set; }
        DateTime Attr_AssignedDate { get; set; }
        DateTime Attr_PlannedDate { get; set; }
        DateTime Attr_StartDate { get; set; }
        DateTime Attr_EndDate { get; set; }


        // Relationships 

        public DomainClassR LinkedR5Target();

        public bool LinkR5Target(DomainClassR instance, IList<ChangedState> changedStates=null);

        public bool UnlinkR5Target(DomainClassR instance, IList<ChangedState> changedStates=null);
        public DomainClassWA LinkedR7OtherResponsiblePerson();


        // Conceptual Information Class's Operations



    }
}
