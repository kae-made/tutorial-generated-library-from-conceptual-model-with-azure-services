// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace BuildingManagement
{
    public partial class DomainClassWLBase : DomainClassWL
    {
        protected static readonly string className = "WL";

        public string DomainName { get { return CIMBuildingManagementLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"WorkloadId={attr_WorkloadId}"; }

        public static DomainClassWLBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassWLBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WL(WorkloadId={newInstance.Attr_WorkloadId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassWLBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_WorkloadId = Guid.NewGuid().ToString();
        }
        protected string attr_WorkloadId;
        protected bool stateof_WorkloadId = false;

        protected string attr_TargetRoomId;
        protected bool stateof_TargetRoomId = false;

        protected DomainTypeWorkloadState attr_CurrentStatus;
        protected bool stateof_CurrentStatus = false;

        protected DateTime attr_OccurrenceDate;
        protected bool stateof_OccurrenceDate = false;

        protected DateTime attr_AssignedDate;
        protected bool stateof_AssignedDate = false;

        protected DateTime attr_PlannedDate;
        protected bool stateof_PlannedDate = false;

        protected DateTime attr_StartDate;
        protected bool stateof_StartDate = false;

        protected DateTime attr_EndDate;
        protected bool stateof_EndDate = false;

        public string Attr_WorkloadId { get { return attr_WorkloadId; } set { attr_WorkloadId = value; stateof_WorkloadId = true; } }
        public string Attr_TargetRoomId { get { return attr_TargetRoomId; } }
        public DomainTypeWorkloadState Attr_CurrentStatus { get { return attr_CurrentStatus; } set { attr_CurrentStatus = value; stateof_CurrentStatus = true; } }
        public DateTime Attr_OccurrenceDate { get { return attr_OccurrenceDate; } set { attr_OccurrenceDate = value; stateof_OccurrenceDate = true; } }
        public DateTime Attr_AssignedDate { get { return attr_AssignedDate; } set { attr_AssignedDate = value; stateof_AssignedDate = true; } }
        public DateTime Attr_PlannedDate { get { return attr_PlannedDate; } set { attr_PlannedDate = value; stateof_PlannedDate = true; } }
        public DateTime Attr_StartDate { get { return attr_StartDate; } set { attr_StartDate = value; stateof_StartDate = true; } }
        public DateTime Attr_EndDate { get { return attr_EndDate; } set { attr_EndDate = value; stateof_EndDate = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassWL instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "WorkloadId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_WorkloadId)
                        {
                            result = false;
                        }
                        break;
                    case "TargetRoomId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_TargetRoomId)
                        {
                            result = false;
                        }
                        break;
                    case "CurrentStatus":
                        if ((DomainTypeWorkloadState)conditionPropertyValues[propertyName] != instance.Attr_CurrentStatus)
                        {
                            result = false;
                        }
                        break;
                    case "OccurrenceDate":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_OccurrenceDate)
                        {
                            result = false;
                        }
                        break;
                    case "AssignedDate":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_AssignedDate)
                        {
                            result = false;
                        }
                        break;
                    case "PlannedDate":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_PlannedDate)
                        {
                            result = false;
                        }
                        break;
                    case "StartDate":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_StartDate)
                        {
                            result = false;
                        }
                        break;
                    case "EndDate":
                        if ((DateTime)conditionPropertyValues[propertyName] != instance.Attr_EndDate)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR5RTarget;
        public DomainClassR LinkedR5Target()
        {
            if (relR5RTarget == null)
            {
                var candidates = instanceRepository.GetDomainInstances("R").Where(inst=>(this.Attr_TargetRoomId==((DomainClassR)inst).Attr_RoomId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "R", "R5", candidates, () => { return DomainClassRBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR5RTarget = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R5", Phrase = "Target" };

            }
            return relR5RTarget.GetDestination<DomainClassR>();
        }

        public bool LinkR5Target(DomainClassR instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR5RTarget == null)
            {
                this.attr_TargetRoomId = instance.Attr_RoomId;
                this.stateof_TargetRoomId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WL(WorkloadId={this.Attr_WorkloadId}):link[R(RoomId={instance.Attr_RoomId})]");

                result = (LinkedR5Target()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR5RTarget });
                }
            }
            return result;
        }

        public bool UnlinkR5Target(DomainClassR instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR5RTarget != null && ( this.Attr_TargetRoomId==instance.Attr_RoomId ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR5RTarget });
        
                this.attr_TargetRoomId = null;
                this.stateof_TargetRoomId = true;
                relR5RTarget = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WL(WorkloadId={this.Attr_WorkloadId}):unlink[R(RoomId={instance.Attr_RoomId})]");


                result = true;
            }
            return result;
        }
        public DomainClassWA LinkedR7OtherResponsiblePerson()
        {
            var candidates = instanceRepository.GetDomainInstances("WA").Where(inst=>(this.Attr_WorkloadId==((DomainClassWA)inst).Attr_WorkloadId));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "WA", "R7_ResponsiblePerson", candidates, () => { return DomainClassWABase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassWA)candidates.FirstOrDefault()).LinkedR7OneContract();
            }
            return (DomainClassWA)candidates.FirstOrDefault();
        }



        
        public bool Validate()
        {
            bool isValid = true;
            if (relR5RTarget == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:WL(WorkloadId={this.Attr_WorkloadId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("WorkloadId"))
            {
                attr_WorkloadId = (string)propertyValues["WorkloadId"];
            }
            stateof_WorkloadId = false;
            if (propertyValues.ContainsKey("TargetRoomId"))
            {
                attr_TargetRoomId = (string)propertyValues["TargetRoomId"];
            }
            stateof_TargetRoomId = false;
            if (propertyValues.ContainsKey("CurrentStatus"))
            {
                attr_CurrentStatus = (DomainTypeWorkloadState)propertyValues["CurrentStatus"];
            }
            stateof_CurrentStatus = false;
            if (propertyValues.ContainsKey("OccurrenceDate"))
            {
                if (propertyValues["OccurrenceDate"] is string)
                {
                    attr_OccurrenceDate = DateTime.Parse((string)propertyValues["OccurrenceDate"]);
                }
                else
                {
                    attr_OccurrenceDate = (DateTime)propertyValues["OccurrenceDate"];
                }
            }
            stateof_OccurrenceDate = false;
            if (propertyValues.ContainsKey("AssignedDate"))
            {
                if (propertyValues["AssignedDate"] is string)
                {
                    attr_AssignedDate = DateTime.Parse((string)propertyValues["AssignedDate"]);
                }
                else
                {
                    attr_AssignedDate = (DateTime)propertyValues["AssignedDate"];
                }
            }
            stateof_AssignedDate = false;
            if (propertyValues.ContainsKey("PlannedDate"))
            {
                if (propertyValues["PlannedDate"] is string)
                {
                    attr_PlannedDate = DateTime.Parse((string)propertyValues["PlannedDate"]);
                }
                else
                {
                    attr_PlannedDate = (DateTime)propertyValues["PlannedDate"];
                }
            }
            stateof_PlannedDate = false;
            if (propertyValues.ContainsKey("StartDate"))
            {
                if (propertyValues["StartDate"] is string)
                {
                    attr_StartDate = DateTime.Parse((string)propertyValues["StartDate"]);
                }
                else
                {
                    attr_StartDate = (DateTime)propertyValues["StartDate"];
                }
            }
            stateof_StartDate = false;
            if (propertyValues.ContainsKey("EndDate"))
            {
                if (propertyValues["EndDate"] is string)
                {
                    attr_EndDate = DateTime.Parse((string)propertyValues["EndDate"]);
                }
                else
                {
                    attr_EndDate = (DateTime)propertyValues["EndDate"];
                }
            }
            stateof_EndDate = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_WorkloadId)
            {
                results.Add("WorkloadId", attr_WorkloadId);
                stateof_WorkloadId = false;
            }
            if (stateof_TargetRoomId)
            {
                results.Add("TargetRoomId", attr_TargetRoomId);
                stateof_TargetRoomId = false;
            }
            if (stateof_CurrentStatus)
            {
                results.Add("CurrentStatus", attr_CurrentStatus);
                stateof_CurrentStatus = false;
            }
            if (stateof_OccurrenceDate)
            {
                results.Add("OccurrenceDate", attr_OccurrenceDate);
                stateof_OccurrenceDate = false;
            }
            if (stateof_AssignedDate)
            {
                results.Add("AssignedDate", attr_AssignedDate);
                stateof_AssignedDate = false;
            }
            if (stateof_PlannedDate)
            {
                results.Add("PlannedDate", attr_PlannedDate);
                stateof_PlannedDate = false;
            }
            if (stateof_StartDate)
            {
                results.Add("StartDate", attr_StartDate);
                stateof_StartDate = false;
            }
            if (stateof_EndDate)
            {
                results.Add("EndDate", attr_EndDate);
                stateof_EndDate = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"WorkloadId={this.Attr_WorkloadId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("WorkloadId", attr_WorkloadId);
            if (!onlyIdentity) results.Add("TargetRoomId", attr_TargetRoomId);
            if (!onlyIdentity) results.Add("CurrentStatus", attr_CurrentStatus);
            if (!onlyIdentity) results.Add("OccurrenceDate", attr_OccurrenceDate);
            if (!onlyIdentity) results.Add("AssignedDate", attr_AssignedDate);
            if (!onlyIdentity) results.Add("PlannedDate", attr_PlannedDate);
            if (!onlyIdentity) results.Add("StartDate", attr_StartDate);
            if (!onlyIdentity) results.Add("EndDate", attr_EndDate);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
