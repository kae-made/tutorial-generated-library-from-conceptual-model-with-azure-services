// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Reflection;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ADTTestModel
{
    public partial class CIMADTTestModelLib
    {
        public void TestSelectInstances()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : SELECT ANY middleEntity FROM INSTANCES OF ME;
            //  2 : SELECT MANY middleEntities FROM INSTANCES OF ME;
            //  3 : SELECT ANY middleEntity FROM INSTANCES OF ME WHERE selected.Comfortable == True;
            //  4 : SELECT MANY middileEntities FROM INSTANCES OF ME WHERE (selected.PreferredHumidity > 50 AND selected.PreferredHumidity < 25) OR selected.Comfortable == False;
            //  5 :  


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var middleEntityTempSet = instanceRepository.GetDomainInstances("ME");
            if (instanceRepository.ExternalStorageAdaptor != null) middleEntityTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "ME", middleEntityTempSet, () => { return ""; }, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var middleEntity = (DomainClassME)(middleEntityTempSet.FirstOrDefault());

            // Line : 2
            var candidatesOfmiddleEntities = instanceRepository.GetDomainInstances("ME");
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfmiddleEntities = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "ME", candidatesOfmiddleEntities, () => { return ""; }, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            var middleEntities = new List<DomainClassME>();
            foreach (var candidateOfmiddleEntities in candidatesOfmiddleEntities)
            {
                middleEntities.Add((DomainClassME)candidateOfmiddleEntities);
            }

            // Line : 3
            middleEntityTempSet = instanceRepository.GetDomainInstances("ME").Where(selected => ((((DomainClassME)selected).Attr_Comfortable == true)));
            if (instanceRepository.ExternalStorageAdaptor != null) middleEntityTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "ME", middleEntityTempSet, () => { return $"(Comfortable = TRUE)"; }, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            middleEntity = (DomainClassME)(middleEntityTempSet.FirstOrDefault());

            // Line : 4
            var candidatesOfmiddileEntities = instanceRepository.GetDomainInstances("ME").Where(selected => ((((((DomainClassME)selected).Attr_PreferredHumidity > 50) && (((DomainClassME)selected).Attr_PreferredHumidity < 25)) || (((DomainClassME)selected).Attr_Comfortable == false))));
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfmiddileEntities = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "ME", candidatesOfmiddileEntities, () => { return $"(((PreferredHumidity > 50) AND (PreferredHumidity < 25)) OR (Comfortable = FALSE))"; }, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            var middileEntities = new List<DomainClassME>();
            foreach (var instance in candidatesOfmiddileEntities)
            {
                middileEntities.Add((DomainClassME)instance);
            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void TestSelectRelated()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : SELECT ANY middleEntity FROM INSTANCES OF ME;
            //  2 : SELECT ONE topEntity RELATED BY middleEntity->TE[R1];
            //  3 : SELECT ANY liefDevice RELATED BY middleEntity->LD[R2.'measurement'];
            //  4 : SELECT ANY liefDeice RELATED BY middleEntity->LD[R2.'measurement'] WHERE selected.Environment.Temperature == 25;
            //  5 : SELECT MANY liefDevices RELATED BY middleEntity->LD[R2.'measurement'];
            //  6 : SELECT MANY liefDevices RELATED BY middleEntity->LD[R2.'measurement'] WHERE selected.Environment.Humidity > 50 AND selected.CurrentInterval < 10000;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var middleEntityTempSet = instanceRepository.GetDomainInstances("ME");
            if (instanceRepository.ExternalStorageAdaptor != null) middleEntityTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "ME", middleEntityTempSet, () => { return ""; }, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var middleEntity = (DomainClassME)(middleEntityTempSet.FirstOrDefault());

            // Line : 2
            var topEntity = middleEntity.LinkedR1();

            // Line : 3
            var liefDevice = middleEntity.LinkedR2Measurement().FirstOrDefault();

            // Line : 4
            var liefDeice = middleEntity.LinkedR2Measurement().Where(selected =>((((DomainClassLD)selected).Attr_Environment.Temperature == 25))).FirstOrDefault();

            // Line : 5
            var liefDevices = middleEntity.LinkedR2Measurement() as List<DomainClassLD>;

            // Line : 6
            liefDevices = middleEntity.LinkedR2Measurement() as List<DomainClassLD>;


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void TestInitialize()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY topEntity FROM INSTANCES OF TE;
            //   2 : IF empty topEntity
            //   3 : 	CREATE OBJECT INSTANCE topEntity OF TE;
            //   4 : 	topEntity.X = 10;
            //   5 : 	topEntity.S = "hello";
            //   6 : 	
            //   7 : 	index = 0;
            //   8 : 	WHILE index < 2
            //   9 : 		CREATE OBJECT INSTANCE middleEntity OF ME;
            //  10 : 		middleEntity.Comfortable = False;
            //  11 : 		middleEntity.PreferredHumidity = 49 + index * 2;
            //  12 : 		middleEntity.PreferredTemperature = 27 - index;
            //  13 : 		RELATE middleEntity TO topEntity ACROSS R1;
            //  14 : 		dindex = 0;
            //  15 : 		WHILE dindex < 3
            //  16 : 			CREATE OBJECT INSTANCE liefDevice OF LD;
            //  17 : 			liefDevice.Number = dindex;
            //  18 : 			liefDevice.RequestInterval = 10000;
            //  19 : 			RELATE middleEntity TO liefDevice ACROSS R2;
            //  20 : 			dindex = dindex + 1;
            //  21 : 		END WHILE;
            //  22 : 		index = index + 1;
            //  23 : 	END WHILE;
            //  24 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var topEntityTempSet = instanceRepository.GetDomainInstances("TE");
            if (instanceRepository.ExternalStorageAdaptor != null) topEntityTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "TE", topEntityTempSet, () => { return ""; }, () => { return DomainClassTEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var topEntity = (DomainClassTE)(topEntityTempSet.FirstOrDefault());

            // Line : 2
            if (topEntity == null)
            {
                // Line : 3
                topEntity = DomainClassTEBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 4
                topEntity.Attr_X = 10;
                // Line : 5
                topEntity.Attr_S = "hello";
                // Line : 7
                var index = 0;
                // Line : 8
                while ((index < 2))
                {
                    // Line : 9
                    var middleEntity = DomainClassMEBase.CreateInstance(instanceRepository, logger, changedStates);
                    // Line : 10
                    middleEntity.Attr_Comfortable = false;
                    // Line : 11
                    middleEntity.Attr_PreferredHumidity = (49 + (index * 2));
                    // Line : 12
                    middleEntity.Attr_PreferredTemperature = (27 - index);
                    // Line : 13
                    // middleEntity - R1 -> topEntity;
                    middleEntity.LinkR1(topEntity, changedStates);

                    // Line : 14
                    var dindex = 0;
                    // Line : 15
                    while ((dindex < 3))
                    {
                        // Line : 16
                        var liefDevice = DomainClassLDBase.CreateInstance(instanceRepository, logger, changedStates);
                        // Line : 17
                        liefDevice.Attr_Number = dindex;
                        // Line : 18
                        liefDevice.Attr_RequestInterval = 10000;
                        // Line : 19
                        // middleEntity - R2 -> liefDevice;
                        liefDevice.LinkR2(middleEntity, changedStates);

                        // Line : 20
                        dindex = (dindex + 1);
                    }

                    // Line : 22
                    index = (index + 1);
                }

            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void ClearInstances()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT MANY teSet FROM INSTANCES OF TE;
            //   2 : FOR EACH te IN teSet
            //   3 : 	SELECT MANY meSet RELATED BY te->ME[R1.'child'];
            //   4 : 	FOR EACH me IN meSet
            //   5 : 		SELECT MANY ldSet RELATED BY me->LD[R2.'measurement'];
            //   6 : 		FOR EACH ld IN ldSet
            //   7 : 			UNRELATE ld FROM me ACROSS R2;
            //   8 : 			DELETE OBJECT INSTANCE ld;
            //   9 : 		END FOR;
            //  10 : 		UNRELATE te FROM me ACROSS R1;
            //  11 : 		DELETE OBJECT INSTANCE me;
            //  12 : 	END FOR;
            //  13 : 	DELETE OBJECT INSTANCE te;
            //  14 : END FOR;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var candidatesOfteSet = instanceRepository.GetDomainInstances("TE");
            if (instanceRepository.ExternalStorageAdaptor != null) candidatesOfteSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "TE", candidatesOfteSet, () => { return ""; }, () => { return DomainClassTEBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            var teSet = new List<DomainClassTE>();
            foreach (var candidateOfteSet in candidatesOfteSet)
            {
                teSet.Add((DomainClassTE)candidateOfteSet);
            }

            // Line : 2
            foreach (var te in teSet)
            {
                // Line : 3
                var meSet = te.LinkedR1Child() as List<DomainClassME>;

                // Line : 4
                foreach (var me in meSet)
                {
                    // Line : 5
                    var ldSet = me.LinkedR2Measurement() as List<DomainClassLD>;

                    // Line : 6
                    foreach (var ld in ldSet)
                    {
                        // Line : 7
                        // Unrelate ld From me Across R2
                        ld.UnlinkR2(me, changedStates);

                        // Line : 8
                        ld.DeleteInstance(changedStates);
                    }

                    // Line : 10
                    // Unrelate te From me Across R1
                    me.UnlinkR1(te, changedStates);

                    // Line : 11
                    me.DeleteInstance(changedStates);
                }

                // Line : 13
                te.DeleteInstance(changedStates);
            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void TestExternalEntity()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : text = "abc";
            //  2 : text_length = STR::len( expression:text );
            //  3 : TEE::Test();


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // External Entities Reference Declarations.
            var _eeSTRRef_ = (Kae.DomainModel.Csharp.Framework.ExternalEntity.STR.STRWrapper)instanceRepository.GetExternalEntity("STR");

            var _eeTEERef_ = (ExternalEntities.TEEWrapper)instanceRepository.GetExternalEntity("TEE");

            // Line : 1
            var text = "abc";
            // Line : 2
            var text_length = _eeSTRRef_.len(expression:text);
            // Line : 3
            _eeTEERef_.Test();

            instanceRepository.SyncChangedStates(changedStates);
        }

        public IList<string> CreateExternalEntities()
        {
            var configuration = new List<string>();

            instanceRepository.Add(new Kae.DomainModel.Csharp.Framework.ExternalEntity.STR.STRImpl());
            var refOfSTR = instanceRepository.GetExternalEntity("STR");
            configuration.AddRange(refOfSTR.ConfigurationKeys);

            instanceRepository.Add(new Kae.DomainModel.Csharp.Framework.ExternalEntities.AzureIoTHub.AzureIoTHubImpl());
            var refOfAIH = instanceRepository.GetExternalEntity("AIH");
            configuration.AddRange(refOfAIH.ConfigurationKeys);
            return configuration;
        }
        public void Initialize(IDictionary<string, IDictionary<string, object>> configuration)
        {
            var refOfSTR = instanceRepository.GetExternalEntity("STR");
            refOfSTR.Initialize(configuration["STR"]);
            var refOfAIH = instanceRepository.GetExternalEntity("AIH");
            refOfAIH.Initialize(configuration["AIH"]);
        }
    }
}
