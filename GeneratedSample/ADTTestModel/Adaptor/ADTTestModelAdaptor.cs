// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Azure.Core;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ADTTestModel.Adaptor
{
    // Entry for Application front end.
    public static class DomainModelAdaptorEntry
    {
        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();
        public static DomainModelAdaptor GetAdaptor(Logger logger) { foreach (var k in Configuration.Keys) { ADTTestModelAdaptor.Configuration.Add(k, Configuration[k]); } return ADTTestModelAdaptor.GetInstance(logger); }
    }

    public class ADTTestModelAdaptor : DomainModelAdaptor
    {
        CIMADTTestModelLib domainModel;

        public static DomainModelAdaptor adapterInstance = null;

        public static IDictionary<string, object> Configuration { get; } = new Dictionary<string, object>();

        public static DomainModelAdaptor GetInstance(Logger logger)
        {
            if (adapterInstance == null)
            {
                var instanceRepository = new InstanceRepositoryInMemory(logger);

                var cimLib = new CIMADTTestModelLib(instanceRepository);
                adapterInstance = new ADTTestModelAdaptor(cimLib, logger);
            }
            return adapterInstance;
        }

        public override IDictionary<string, IList<string>> ConfigurationKeys()
        {
            var configurationKeys = new Dictionary<string, IList<string>>();

            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                configurationKeys.Add(externalEntity.EEKey, new List<string>());
                foreach(var cKey in externalEntity.ConfigurationKeys)
                {
                    configurationKeys[externalEntity.EEKey].Add(cKey);
                }
            }

            // for Azure Digital Twins Adaptor
            configurationKeys.Add("AzureDigitalTwins", new List<string>());
            configurationKeys["AzureDigitalTwins"].Add("ADTInstanceUri");
            configurationKeys["AzureDigitalTwins"].Add("ADTCredential");

            return configurationKeys;
        }

        public override void Initialize(IDictionary<string, IDictionary<string, object>> config)
        {
            var externalEntities = domainModel.InstanceRepository.GetExternalEntities();
            foreach(var externalEntity in externalEntities)
            {
                externalEntity.Initialize(config[externalEntity.EEKey]);
            }

            // for Azure Digital Twins
            string adtInstanceUri = (string)config["AzureDigitalTwins"]["ADTInstanceUri"];
            TokenCredential adtCredential = (TokenCredential)config["AzureDigitalTwins"]["ADTCredential"];
            var azureDigitalTwinsAdaptor = new ADTTestModelAzureDigitalTwinsAdaptor(adtInstanceUri, adtCredential, domainModel.InstanceRepository, logger);
            azureDigitalTwinsAdaptor.Initialize();
            domainModel.InstanceRepository.ExternalStorageAdaptor = azureDigitalTwinsAdaptor;
        }

        public ADTTestModelAdaptor(CIMADTTestModelLib domainModel, Logger logger) : base(logger)
        {
            this.domainModel = domainModel;
            domainOpsParamSpecs = _domainOpsParamSpecs;
            classSpecs = _classSpecs;
            domainModelName = "ADTTestModel";
        }

        protected Dictionary<string, Dictionary<string, ParamSpec>> _domainOpsParamSpecs = new Dictionary<string, Dictionary<string, ParamSpec>>()
        {
            {
                "TestSelectInstances", new Dictionary<string, ParamSpec>()
            },
            {
                "TestSelectRelated", new Dictionary<string, ParamSpec>()
            },
            {
                "TestInitialize", new Dictionary<string, ParamSpec>()
            },
            {
                "ClearInstances", new Dictionary<string, ParamSpec>()
            },
            {
                "TestExternalEntity", new Dictionary<string, ParamSpec>()
            }
        };

        protected Dictionary<string, ClassSpec> _classSpecs = new Dictionary<string, ClassSpec>()
        {
            {
                "OOD", new ClassSpec()
                {                
                    Name = "Order of Device",
                    KeyLetter = "OOD",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "OodId", new PropSpec()
                            { Name = "OodId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "left_LiefDeviceId", new PropSpec()
                            { Name = "left_LiefDeviceId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "right_LiefDeviceId", new PropSpec()
                            { Name = "right_LiefDeviceId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "LD[R3.'right']", new LinkSpec()
                            { Name = "LD[R3.'right']", RelID = "R3", Phrase = "right", Set = false, Condition = false, DstKeyLett = "LD" }
                        },
                        {
                            "LD[R3.'left']", new LinkSpec()
                            { Name = "LD[R3.'left']", RelID = "R3", Phrase = "left", Set = false, Condition = false, DstKeyLett = "LD" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "TS", new ClassSpec()
                {                
                    Name = "TestSuper",
                    KeyLetter = "TS",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "TSId", new PropSpec()
                            { Name = "TSId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "SC2[R4]", new LinkSpec()
                            { Name = "SC2[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "SC2" }
                        },
                        {
                            "SC1[R4]", new LinkSpec()
                            { Name = "SC1[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "SC1" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "TE", new ClassSpec()
                {                
                    Name = "Top Entity",
                    KeyLetter = "TE",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "TopEntityId", new PropSpec()
                            { Name = "TopEntityId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "X", new PropSpec()
                            { Name = "X", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "S", new PropSpec()
                            { Name = "S", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TestInterval", new PropSpec()
                            { Name = "TestInterval", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "GetNumberOfLiefDevices", new OperationSpec()
                            {
                                Name = "GetNumberOfLiefDevices", ReturnType = ParamSpec.DataType.Integer, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "ME[R1.'child']", new LinkSpec()
                            { Name = "ME[R1.'child']", RelID = "R1", Phrase = "child", Set = true, Condition = true, DstKeyLett = "ME" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "W", new ClassSpec()
                {                
                    Name = "Worker",
                    KeyLetter = "W",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "WId", new PropSpec()
                            { Name = "WId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "LiefDeviceId", new PropSpec()
                            { Name = "LiefDeviceId", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "LD[R6.'target']", new LinkSpec()
                            { Name = "LD[R6.'target']", RelID = "R6", Phrase = "target", Set = false, Condition = false, DstKeyLett = "LD" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "W_1_Create", new OperationSpec()
                            {
                                Name = "W_1_Create", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "targetId", new ParamSpec() {Name = "targetId", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        },
                        {
                            "W_2_Start", new OperationSpec()
                            {
                                Name = "W_2_Start", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "W_3_Done", new OperationSpec()
                            {
                                Name = "W_3_Done", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "SC2", new ClassSpec()
                {                
                    Name = "SubClass2",
                    KeyLetter = "SC2",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "TSId", new PropSpec()
                            { Name = "TSId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "TS[R4]", new LinkSpec()
                            { Name = "TS[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "TS" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "SC1", new ClassSpec()
                {                
                    Name = "SubClass1",
                    KeyLetter = "SC1",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "TSId", new PropSpec()
                            { Name = "TSId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "TS[R4]", new LinkSpec()
                            { Name = "TS[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "TS" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "ME", new ClassSpec()
                {                
                    Name = "Middle Entity",
                    KeyLetter = "ME",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "MiddleEntityId", new PropSpec()
                            { Name = "MiddleEntityId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TopEntityId", new PropSpec()
                            { Name = "TopEntityId", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Comfortable", new PropSpec()
                            { Name = "Comfortable", DataType = ParamSpec.DataType.Boolean, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PreferredTemperature", new PropSpec()
                            { Name = "PreferredTemperature", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "PreferredHumidity", new PropSpec()
                            { Name = "PreferredHumidity", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "Command", new OperationSpec()
                            {
                                Name = "Command", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "order", new ParamSpec() {Name = "order", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "LD[R2.'measurement']", new LinkSpec()
                            { Name = "LD[R2.'measurement']", RelID = "R2", Phrase = "measurement", Set = true, Condition = true, DstKeyLett = "LD" }
                        },
                        {
                            "MML[R5.'middle']", new LinkSpec()
                            { Name = "MML[R5.'middle']", RelID = "R5", Phrase = "middle", Set = false, Condition = true, DstKeyLett = "MML" }
                        },
                        {
                            "TE[R1]", new LinkSpec()
                            { Name = "TE[R1]", RelID = "R1", Phrase = "", Set = false, Condition = false, DstKeyLett = "TE" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "MML", new ClassSpec()
                {                
                    Name = "Mapping Middel To Lief",
                    KeyLetter = "MML",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "MMLId", new PropSpec()
                            { Name = "MMLId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "MiddleEntityId", new PropSpec()
                            { Name = "MiddleEntityId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "LiefDeviceId", new PropSpec()
                            { Name = "LiefDeviceId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "ME[R5.'middle']", new LinkSpec()
                            { Name = "ME[R5.'middle']", RelID = "R5", Phrase = "middle", Set = false, Condition = false, DstKeyLett = "ME" }
                        },
                        {
                            "LD[R5.'lief']", new LinkSpec()
                            { Name = "LD[R5.'lief']", RelID = "R5", Phrase = "lief", Set = false, Condition = false, DstKeyLett = "LD" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "LD", new ClassSpec()
                {                
                    Name = "Lief Device",
                    KeyLetter = "LD",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "LiefDeviceId", new PropSpec()
                            { Name = "LiefDeviceId", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Environment", new PropSpec()
                            { Name = "Environment", DataType = ParamSpec.DataType.Complex, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Number", new PropSpec()
                            { Name = "Number", DataType = ParamSpec.DataType.Integer, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "MiddleEntityId", new PropSpec()
                            { Name = "MiddleEntityId", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "RequestInterval", new PropSpec()
                            { Name = "RequestInterval", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "CurrentInterval", new PropSpec()
                            { Name = "CurrentInterval", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "DeviceStatus", new PropSpec()
                            { Name = "DeviceStatus", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "Command", new OperationSpec()
                            {
                                Name = "Command", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "order", new ParamSpec() {Name = "order", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        },
                        {
                            "MeasureEnvironment", new OperationSpec()
                            {
                                Name = "MeasureEnvironment", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "CommandWithResult", new OperationSpec()
                            {
                                Name = "CommandWithResult", ReturnType = ParamSpec.DataType.String, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "mode", new ParamSpec() {Name = "mode", TypeKind = ParamSpec.DataType.Integer, IsArray = false} },
                                    { "operation", new ParamSpec() {Name = "operation", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "OOD[R3.'right']", new LinkSpec()
                            { Name = "OOD[R3.'right']", RelID = "R3", Phrase = "right", Set = false, Condition = true, DstKeyLett = "OOD" }
                        },
                        {
                            "OOD[R3.'left']", new LinkSpec()
                            { Name = "OOD[R3.'left']", RelID = "R3", Phrase = "left", Set = false, Condition = true, DstKeyLett = "OOD" }
                        },
                        {
                            "MML[R5.'lief']", new LinkSpec()
                            { Name = "MML[R5.'lief']", RelID = "R5", Phrase = "lief", Set = false, Condition = true, DstKeyLett = "MML" }
                        },
                        {
                            "W[R6]", new LinkSpec()
                            { Name = "W[R6]", RelID = "R6", Phrase = "", Set = false, Condition = true, DstKeyLett = "W" }
                        },
                        {
                            "ME[R2]", new LinkSpec()
                            { Name = "ME[R2]", RelID = "R2", Phrase = "", Set = false, Condition = true, DstKeyLett = "ME" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "LD_1_Measure", new OperationSpec()
                            {
                                Name = "LD_1_Measure", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "LD_2_Measured", new OperationSpec()
                            {
                                Name = "LD_2_Measured", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            }
        };

        public override string InvokeDomainOperation(string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (domainOpsParamSpecs.ContainsKey(name))
            {
                var opSpec = domainOpsParamSpecs[name];
                RequestingParameters invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>() };
                if (CheckParameters(opSpec, parameters, invSpec))
                {
                    switch (name)
                    {
                        case "TestSelectInstances":
                            domainModel.TestSelectInstances();
                            break;
                        case "TestSelectRelated":
                            domainModel.TestSelectRelated();
                            break;
                        case "TestInitialize":
                            domainModel.TestInitialize();
                            break;
                        case "ClearInstances":
                            domainModel.ClearInstances();
                            break;
                        case "TestExternalEntity":
                            domainModel.TestExternalEntity();
                            break;
                    }
                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) domainModel.InstanceRepository.ExternalStorageAdaptor.ClearCache(CIMADTTestModelLib.DomainName);

                }
            }

            return result;
        }

        public override string InvokeDomainClassOperation(string classKeyLett, string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "TE":
                                    var instanceOfTETempSet = domainModel.InstanceRepository.GetDomainInstances("TE").Where(selected => (((DomainClassTE)selected).Attr_TopEntityId == invSpec.Identities["TopEntityId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfTETempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMADTTestModelLib.DomainName, "TE", instanceOfTETempSet, () => { return $"TopEntityId = '{invSpec.Identities["TopEntityId"]}'"; }, () => { return DomainClassTEBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfTE = (DomainClassTE)instanceOfTETempSet.FirstOrDefault();
                                    if (instanceOfTE != null)
                                    {
                                        switch (name)
                                        {
                                            case "GetNumberOfLiefDevices":
                                                var resultOfGetNumberOfLiefDevices = new { result = instanceOfTE.GetNumberOfLiefDevices() };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultOfGetNumberOfLiefDevices);
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                                case "ME":
                                    var instanceOfMETempSet = domainModel.InstanceRepository.GetDomainInstances("ME").Where(selected => (((DomainClassME)selected).Attr_MiddleEntityId == invSpec.Identities["MiddleEntityId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfMETempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMADTTestModelLib.DomainName, "ME", instanceOfMETempSet, () => { return $"MiddleEntityId = '{invSpec.Identities["MiddleEntityId"]}'"; }, () => { return DomainClassMEBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfME = (DomainClassME)instanceOfMETempSet.FirstOrDefault();
                                    if (instanceOfME != null)
                                    {
                                        switch (name)
                                        {
                                            case "Command":
                                                instanceOfME.Command(order:(string)invSpec.Parameters["order"]);
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                                case "LD":
                                    var instanceOfLDTempSet = domainModel.InstanceRepository.GetDomainInstances("LD").Where(selected => (((DomainClassLD)selected).Attr_LiefDeviceId == invSpec.Identities["LiefDeviceId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfLDTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMADTTestModelLib.DomainName, "LD", instanceOfLDTempSet, () => { return $"LiefDeviceId = '{invSpec.Identities["LiefDeviceId"]}'"; }, () => { return DomainClassLDBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfLD = (DomainClassLD)instanceOfLDTempSet.FirstOrDefault();
                                    if (instanceOfLD != null)
                                    {
                                        switch (name)
                                        {
                                            case "Command":
                                                instanceOfLD.Command(order:(string)invSpec.Parameters["order"]);
                                                break;
                                            case "MeasureEnvironment":
                                                instanceOfLD.MeasureEnvironment();
                                                break;
                                            case "CommandWithResult":
                                                var resultOfCommandWithResult = new { result = instanceOfLD.CommandWithResult(mode:(int)invSpec.Parameters["mode"], operation:(string)invSpec.Parameters["operation"]) };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultOfCommandWithResult);
                                                break;
                                            default:
                                                var resultJson = new { result = "error", status = $"\"error-unknown-operator\":\"{name}\"" };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        var resultJson = new { result = "error", status = $"\"error-unexisted-instance\":\"{classKeyLett}[{invSpec.Identities["MiddleEntityId"]}]\"" };
                                        result = Newtonsoft.Json.JsonConvert.SerializeObject(resultJson);
                                    }
                                    break;
                            }
                        }
                    }

                }
            }

            return result;
        }

        public override string SendEvent(string classKeyLett, string name, RequestingParameters parameters)
        {
            string status = "";
            bool sent = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Events.ContainsKey(name))
                {
                    var evtSpec = classSpec.Events[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(evtSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "W":
                                    var instanceOfWTempSet = domainModel.InstanceRepository.GetDomainInstances("W").Where(selected => (((DomainClassW)selected).Attr_WId == invSpec.Identities["WId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfWTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMADTTestModelLib.DomainName, "W", instanceOfWTempSet, () => { return $"WId = '{invSpec.Identities["WId"]}'"; }, () => { return DomainClassWBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfW = (DomainClassW)instanceOfWTempSet.FirstOrDefault();
                                    switch (name)
                                    {
                                        case "W_1_Create":
                                            DomainClassWStateMachine.W_1_Create.Create(instanceOfW, targetId:(string)invSpec.Parameters["targetId"], isSelfEvent:false, sendNow:true, domainModel.InstanceRepository, logger:logger);
                                            sent = true;
                                            break;
                                        case "W_2_Start":
                                            var evtOfW_2_Start = DomainClassWStateMachine.W_2_Start.Create(instanceOfW, isSelfEvent:false, sendNow:true);
                                            if (evtOfW_2_Start != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - WId = '{invSpec.Identities["WId"]}'";
                                            }
                                            break;
                                        case "W_3_Done":
                                            var evtOfW_3_Done = DomainClassWStateMachine.W_3_Done.Create(instanceOfW, isSelfEvent:false, sendNow:true);
                                            if (evtOfW_3_Done != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - WId = '{invSpec.Identities["WId"]}'";
                                            }
                                            break;
                                        default:
                                            status = $"unknown event label:'{name}'";
                                            break;
                                    }
                                    break;
                                case "LD":
                                    var instanceOfLDTempSet = domainModel.InstanceRepository.GetDomainInstances("LD").Where(selected => (((DomainClassLD)selected).Attr_LiefDeviceId == invSpec.Identities["LiefDeviceId"]));
                                    if (domainModel.InstanceRepository.ExternalStorageAdaptor != null) instanceOfLDTempSet = domainModel.InstanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(CIMADTTestModelLib.DomainName, "LD", instanceOfLDTempSet, () => { return $"LiefDeviceId = '{invSpec.Identities["LiefDeviceId"]}'"; }, () => { return DomainClassLDBase.CreateInstance(domainModel.InstanceRepository, logger); }, "any").Result;
                                    var instanceOfLD = (DomainClassLD)instanceOfLDTempSet.FirstOrDefault();
                                    switch (name)
                                    {
                                        case "LD_1_Measure":
                                            var evtOfLD_1_Measure = DomainClassLDStateMachine.LD_1_Measure.Create(instanceOfLD, isSelfEvent:false, sendNow:true);
                                            if (evtOfLD_1_Measure != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - LiefDeviceId = '{invSpec.Identities["LiefDeviceId"]}'";
                                            }
                                            break;
                                        case "LD_2_Measured":
                                            var evtOfLD_2_Measured = DomainClassLDStateMachine.LD_2_Measured.Create(instanceOfLD, isSelfEvent:false, sendNow:true);
                                            if (evtOfLD_2_Measured != null)
                                            {
                                                sent = true;
                                            }
                                            else
                                            {
                                                status = $"unexisted instance - LiefDeviceId = '{invSpec.Identities["LiefDeviceId"]}'";
                                            }
                                            break;
                                        default:
                                            status = $"unknown event label:'{name}'";
                                            break;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            var result = new { sent = sent, status = status };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string UpdateClassProperties(string classKeyLett, RequestingParameters parameters)
        {
            bool updated = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                if (CheckProperties(classSpec.Properties, parameters, invSpec))
                {
                    switch (classKeyLett)
                    {
                        case "TE":
                            var instanceOfTE = (DomainClassTE)domainModel.InstanceRepository.GetDomainInstances("TE").Where(selected => (((DomainClassTE)selected).Attr_TopEntityId == invSpec.Identities["TopEntityId"])).FirstOrDefault();
                            if (instanceOfTE != null)
                            {
                                if (invSpec.Parameters.ContainsKey("X"))
                                {
                                    instanceOfTE.Attr_X = (int)invSpec.Parameters["X"];
                                }
                                if (invSpec.Parameters.ContainsKey("S"))
                                {
                                    instanceOfTE.Attr_S = (string)invSpec.Parameters["S"];
                                }
                                if (invSpec.Parameters.ContainsKey("TestInterval"))
                                {
                                    instanceOfTE.Attr_TestInterval = (int)invSpec.Parameters["TestInterval"];
                                }
                                updated = true;
                            }
                            break;
                        case "ME":
                            var instanceOfME = (DomainClassME)domainModel.InstanceRepository.GetDomainInstances("ME").Where(selected => (((DomainClassME)selected).Attr_MiddleEntityId == invSpec.Identities["MiddleEntityId"])).FirstOrDefault();
                            if (instanceOfME != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Comfortable"))
                                {
                                    instanceOfME.Attr_Comfortable = (bool)invSpec.Parameters["Comfortable"];
                                }
                                if (invSpec.Parameters.ContainsKey("PreferredTemperature"))
                                {
                                    instanceOfME.Attr_PreferredTemperature = (int)invSpec.Parameters["PreferredTemperature"];
                                }
                                if (invSpec.Parameters.ContainsKey("PreferredHumidity"))
                                {
                                    instanceOfME.Attr_PreferredHumidity = (int)invSpec.Parameters["PreferredHumidity"];
                                }
                                updated = true;
                            }
                            break;
                        case "LD":
                            var instanceOfLD = (DomainClassLD)domainModel.InstanceRepository.GetDomainInstances("LD").Where(selected => (((DomainClassLD)selected).Attr_LiefDeviceId == invSpec.Identities["LiefDeviceId"])).FirstOrDefault();
                            if (instanceOfLD != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Environment"))
                                {
                                    instanceOfLD.Attr_Environment.Restore((IDictionary<string, object>)invSpec.Parameters["Environment"]);
                                }
                                if (invSpec.Parameters.ContainsKey("RequestInterval"))
                                {
                                    instanceOfLD.Attr_RequestInterval = (int)invSpec.Parameters["RequestInterval"];
                                }
                                if (invSpec.Parameters.ContainsKey("CurrentInterval"))
                                {
                                    instanceOfLD.Attr_CurrentInterval = (int)invSpec.Parameters["CurrentInterval"];
                                }
                                if (invSpec.Parameters.ContainsKey("DeviceStatus"))
                                {
                                    instanceOfLD.Attr_DeviceStatus = (string)invSpec.Parameters["DeviceStatus"];
                                }
                                updated = true;
                            }
                            break;
                    }              
                }
            }
            if (updated)
            {
                domainModel.InstanceRepository.SyncChangedStates(new List<ChangedState>());
            }
            var result = new { updated = updated };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string GetInstances(string classKeyLett)
        {
            List<Dictionary<string, object>> resultInstances = GetInstancesRaw(classKeyLett);

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        protected List<Dictionary<string, object>> GetInstancesRaw(string classKeyLett)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var instances = domainModel.InstanceRepository.GetDomainInstances(classKeyLett);
                foreach (var instance in instances)
                {
                    switch (classKeyLett)
                    {
                        case "OOD":
                            var instanceOfOOD = (DomainClassOOD)instance;
                            var resultOfinstanceOfOOD = new Dictionary<string, object>();
                            resultOfinstanceOfOOD.Add("OodId", instanceOfOOD.Attr_OodId);
                            resultOfinstanceOfOOD.Add("left_LiefDeviceId", instanceOfOOD.Attr_left_LiefDeviceId);
                            resultOfinstanceOfOOD.Add("right_LiefDeviceId", instanceOfOOD.Attr_right_LiefDeviceId);
                            resultInstances.Add(resultOfinstanceOfOOD);
                            break;
                        case "TS":
                            var instanceOfTS = (DomainClassTS)instance;
                            var resultOfinstanceOfTS = new Dictionary<string, object>();
                            resultOfinstanceOfTS.Add("TSId", instanceOfTS.Attr_TSId);
                            resultInstances.Add(resultOfinstanceOfTS);
                            break;
                        case "TE":
                            var instanceOfTE = (DomainClassTE)instance;
                            var resultOfinstanceOfTE = new Dictionary<string, object>();
                            resultOfinstanceOfTE.Add("TopEntityId", instanceOfTE.Attr_TopEntityId);
                            resultOfinstanceOfTE.Add("X", instanceOfTE.Attr_X);
                            resultOfinstanceOfTE.Add("S", instanceOfTE.Attr_S);
                            resultOfinstanceOfTE.Add("TestInterval", instanceOfTE.Attr_TestInterval);
                            resultInstances.Add(resultOfinstanceOfTE);
                            break;
                        case "W":
                            var instanceOfW = (DomainClassW)instance;
                            var resultOfinstanceOfW = new Dictionary<string, object>();
                            resultOfinstanceOfW.Add("WId", instanceOfW.Attr_WId);
                            resultOfinstanceOfW.Add("current_state", instanceOfW.Attr_current_state);
                            resultOfinstanceOfW.Add("LiefDeviceId", instanceOfW.Attr_LiefDeviceId);
                            resultInstances.Add(resultOfinstanceOfW);
                            break;
                        case "SC2":
                            var instanceOfSC2 = (DomainClassSC2)instance;
                            var resultOfinstanceOfSC2 = new Dictionary<string, object>();
                            resultOfinstanceOfSC2.Add("TSId", instanceOfSC2.Attr_TSId);
                            resultInstances.Add(resultOfinstanceOfSC2);
                            break;
                        case "SC1":
                            var instanceOfSC1 = (DomainClassSC1)instance;
                            var resultOfinstanceOfSC1 = new Dictionary<string, object>();
                            resultOfinstanceOfSC1.Add("TSId", instanceOfSC1.Attr_TSId);
                            resultInstances.Add(resultOfinstanceOfSC1);
                            break;
                        case "ME":
                            var instanceOfME = (DomainClassME)instance;
                            var resultOfinstanceOfME = new Dictionary<string, object>();
                            resultOfinstanceOfME.Add("MiddleEntityId", instanceOfME.Attr_MiddleEntityId);
                            resultOfinstanceOfME.Add("TopEntityId", instanceOfME.Attr_TopEntityId);
                            resultOfinstanceOfME.Add("Comfortable", instanceOfME.Attr_Comfortable);
                            resultOfinstanceOfME.Add("PreferredTemperature", instanceOfME.Attr_PreferredTemperature);
                            resultOfinstanceOfME.Add("PreferredHumidity", instanceOfME.Attr_PreferredHumidity);
                            resultInstances.Add(resultOfinstanceOfME);
                            break;
                        case "MML":
                            var instanceOfMML = (DomainClassMML)instance;
                            var resultOfinstanceOfMML = new Dictionary<string, object>();
                            resultOfinstanceOfMML.Add("MMLId", instanceOfMML.Attr_MMLId);
                            resultOfinstanceOfMML.Add("MiddleEntityId", instanceOfMML.Attr_MiddleEntityId);
                            resultOfinstanceOfMML.Add("LiefDeviceId", instanceOfMML.Attr_LiefDeviceId);
                            resultInstances.Add(resultOfinstanceOfMML);
                            break;
                        case "LD":
                            var instanceOfLD = (DomainClassLD)instance;
                            var resultOfinstanceOfLD = new Dictionary<string, object>();
                            resultOfinstanceOfLD.Add("LiefDeviceId", instanceOfLD.Attr_LiefDeviceId);
                            resultOfinstanceOfLD.Add("Environment", instanceOfLD.Attr_Environment);
                            resultOfinstanceOfLD.Add("Number", instanceOfLD.Attr_Number);
                            resultOfinstanceOfLD.Add("MiddleEntityId", instanceOfLD.Attr_MiddleEntityId);
                            resultOfinstanceOfLD.Add("RequestInterval", instanceOfLD.Attr_RequestInterval);
                            resultOfinstanceOfLD.Add("CurrentInterval", instanceOfLD.Attr_CurrentInterval);
                            resultOfinstanceOfLD.Add("DeviceStatus", instanceOfLD.Attr_DeviceStatus);
                            resultOfinstanceOfLD.Add("current_state", instanceOfLD.Attr_current_state);
                            resultInstances.Add(resultOfinstanceOfLD);
                            break;
                    }
                }
                
            }

            return resultInstances;
        }

        public override string GetInstance(string classKeyLett, IDictionary<string, string> identities)
        {
            Dictionary<string, object> resultInstance = new Dictionary<string, object>();
            switch (classKeyLett)
            {
                case "OOD":
                    DomainClassOOD instanceOfOOD = (DomainClassOOD)domainModel.InstanceRepository.GetDomainInstances("OOD").Where(selected => (((DomainClassOOD)selected).Attr_OodId == identities["OodId"])).FirstOrDefault();
                    if (instanceOfOOD != null)
                    {
                        resultInstance.Add("OodId", instanceOfOOD.Attr_OodId);
                        resultInstance.Add("left_LiefDeviceId", instanceOfOOD.Attr_left_LiefDeviceId);
                        resultInstance.Add("right_LiefDeviceId", instanceOfOOD.Attr_right_LiefDeviceId);
                    }
                    break;
                case "TS":
                    DomainClassTS instanceOfTS = (DomainClassTS)domainModel.InstanceRepository.GetDomainInstances("TS").Where(selected => (((DomainClassTS)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                    if (instanceOfTS != null)
                    {
                        resultInstance.Add("TSId", instanceOfTS.Attr_TSId);
                    }
                    break;
                case "TE":
                    DomainClassTE instanceOfTE = (DomainClassTE)domainModel.InstanceRepository.GetDomainInstances("TE").Where(selected => (((DomainClassTE)selected).Attr_TopEntityId == identities["TopEntityId"])).FirstOrDefault();
                    if (instanceOfTE != null)
                    {
                        resultInstance.Add("TopEntityId", instanceOfTE.Attr_TopEntityId);
                        resultInstance.Add("X", instanceOfTE.Attr_X);
                        resultInstance.Add("S", instanceOfTE.Attr_S);
                        resultInstance.Add("TestInterval", instanceOfTE.Attr_TestInterval);
                    }
                    break;
                case "W":
                    DomainClassW instanceOfW = (DomainClassW)domainModel.InstanceRepository.GetDomainInstances("W").Where(selected => (((DomainClassW)selected).Attr_WId == identities["WId"])).FirstOrDefault();
                    if (instanceOfW != null)
                    {
                        resultInstance.Add("WId", instanceOfW.Attr_WId);
                        resultInstance.Add("current_state", instanceOfW.Attr_current_state);
                        resultInstance.Add("LiefDeviceId", instanceOfW.Attr_LiefDeviceId);
                    }
                    break;
                case "SC2":
                    DomainClassSC2 instanceOfSC2 = (DomainClassSC2)domainModel.InstanceRepository.GetDomainInstances("SC2").Where(selected => (((DomainClassSC2)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                    if (instanceOfSC2 != null)
                    {
                        resultInstance.Add("TSId", instanceOfSC2.Attr_TSId);
                    }
                    break;
                case "SC1":
                    DomainClassSC1 instanceOfSC1 = (DomainClassSC1)domainModel.InstanceRepository.GetDomainInstances("SC1").Where(selected => (((DomainClassSC1)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                    if (instanceOfSC1 != null)
                    {
                        resultInstance.Add("TSId", instanceOfSC1.Attr_TSId);
                    }
                    break;
                case "ME":
                    DomainClassME instanceOfME = (DomainClassME)domainModel.InstanceRepository.GetDomainInstances("ME").Where(selected => (((DomainClassME)selected).Attr_MiddleEntityId == identities["MiddleEntityId"])).FirstOrDefault();
                    if (instanceOfME != null)
                    {
                        resultInstance.Add("MiddleEntityId", instanceOfME.Attr_MiddleEntityId);
                        resultInstance.Add("TopEntityId", instanceOfME.Attr_TopEntityId);
                        resultInstance.Add("Comfortable", instanceOfME.Attr_Comfortable);
                        resultInstance.Add("PreferredTemperature", instanceOfME.Attr_PreferredTemperature);
                        resultInstance.Add("PreferredHumidity", instanceOfME.Attr_PreferredHumidity);
                    }
                    break;
                case "MML":
                    DomainClassMML instanceOfMML = (DomainClassMML)domainModel.InstanceRepository.GetDomainInstances("MML").Where(selected => (((DomainClassMML)selected).Attr_MMLId == identities["MMLId"])).FirstOrDefault();
                    if (instanceOfMML != null)
                    {
                        resultInstance.Add("MMLId", instanceOfMML.Attr_MMLId);
                        resultInstance.Add("MiddleEntityId", instanceOfMML.Attr_MiddleEntityId);
                        resultInstance.Add("LiefDeviceId", instanceOfMML.Attr_LiefDeviceId);
                    }
                    break;
                case "LD":
                    DomainClassLD instanceOfLD = (DomainClassLD)domainModel.InstanceRepository.GetDomainInstances("LD").Where(selected => (((DomainClassLD)selected).Attr_LiefDeviceId == identities["LiefDeviceId"])).FirstOrDefault();
                    if (instanceOfLD != null)
                    {
                        resultInstance.Add("LiefDeviceId", instanceOfLD.Attr_LiefDeviceId);
                        resultInstance.Add("Environment", instanceOfLD.Attr_Environment);
                        resultInstance.Add("Number", instanceOfLD.Attr_Number);
                        resultInstance.Add("MiddleEntityId", instanceOfLD.Attr_MiddleEntityId);
                        resultInstance.Add("RequestInterval", instanceOfLD.Attr_RequestInterval);
                        resultInstance.Add("CurrentInterval", instanceOfLD.Attr_CurrentInterval);
                        resultInstance.Add("DeviceStatus", instanceOfLD.Attr_DeviceStatus);
                        resultInstance.Add("current_state", instanceOfLD.Attr_current_state);
                    }
                    break;
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstance);
        }

        public override string GetLinkedInstances(string classKeyLett, IDictionary<string, string> identities, string relName)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Links.ContainsKey(relName))
                {
                    switch (classKeyLett)
                    {
                        case "OOD":
                            DomainClassOOD instanceOfOOD = (DomainClassOOD)domainModel.InstanceRepository.GetDomainInstances("OOD").Where(selected => (((DomainClassOOD)selected).Attr_OodId == identities["OodId"])).FirstOrDefault();
                            if (instanceOfOOD != null)
                            {
                                switch (relName)
                                {
                                    case "LD[R3.'right']":
                                        var linkedInstanceOfR3OneRightLD = instanceOfOOD.LinkedR3OneRight();
                                        if (linkedInstanceOfR3OneRightLD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "LiefDeviceId", linkedInstanceOfR3OneRightLD.Attr_LiefDeviceId },
                                                { "Environment", linkedInstanceOfR3OneRightLD.Attr_Environment },
                                                { "Number", linkedInstanceOfR3OneRightLD.Attr_Number },
                                                { "MiddleEntityId", linkedInstanceOfR3OneRightLD.Attr_MiddleEntityId },
                                                { "RequestInterval", linkedInstanceOfR3OneRightLD.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR3OneRightLD.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR3OneRightLD.Attr_DeviceStatus },
                                                { "current_state", linkedInstanceOfR3OneRightLD.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "LD[R3.'left']":
                                        var linkedInstanceOfR3OtherLeftLD = instanceOfOOD.LinkedR3OtherLeft();
                                        if (linkedInstanceOfR3OtherLeftLD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "LiefDeviceId", linkedInstanceOfR3OtherLeftLD.Attr_LiefDeviceId },
                                                { "Environment", linkedInstanceOfR3OtherLeftLD.Attr_Environment },
                                                { "Number", linkedInstanceOfR3OtherLeftLD.Attr_Number },
                                                { "MiddleEntityId", linkedInstanceOfR3OtherLeftLD.Attr_MiddleEntityId },
                                                { "RequestInterval", linkedInstanceOfR3OtherLeftLD.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR3OtherLeftLD.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR3OtherLeftLD.Attr_DeviceStatus },
                                                { "current_state", linkedInstanceOfR3OtherLeftLD.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "TS":
                            DomainClassTS instanceOfTS = (DomainClassTS)domainModel.InstanceRepository.GetDomainInstances("TS").Where(selected => (((DomainClassTS)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                            if (instanceOfTS != null)
                            {
                                switch (relName)
                                {
                                    case "SC2[R4]":
                                        var linkedInstanceOfR4SC2 = instanceOfTS.LinkedR4SC2();
                                        if (linkedInstanceOfR4SC2 != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "TSId", linkedInstanceOfR4SC2.Attr_TSId }
                                            });
                                        }
                                        break;
                                    case "SC1[R4]":
                                        var linkedInstanceOfR4SC1 = instanceOfTS.LinkedR4SC1();
                                        if (linkedInstanceOfR4SC1 != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "TSId", linkedInstanceOfR4SC1.Attr_TSId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "TE":
                            DomainClassTE instanceOfTE = (DomainClassTE)domainModel.InstanceRepository.GetDomainInstances("TE").Where(selected => (((DomainClassTE)selected).Attr_TopEntityId == identities["TopEntityId"])).FirstOrDefault();
                            if (instanceOfTE != null)
                            {
                                switch (relName)
                                {
                                    case "ME[R1.'child']":
                                        var linkedInstancesOfR1ChildME = instanceOfTE.LinkedR1Child();
                                        foreach (var linkedInstanceOfR1ChildME in linkedInstancesOfR1ChildME)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MiddleEntityId", linkedInstanceOfR1ChildME.Attr_MiddleEntityId },
                                                { "TopEntityId", linkedInstanceOfR1ChildME.Attr_TopEntityId },
                                                { "Comfortable", linkedInstanceOfR1ChildME.Attr_Comfortable },
                                                { "PreferredTemperature", linkedInstanceOfR1ChildME.Attr_PreferredTemperature },
                                                { "PreferredHumidity", linkedInstanceOfR1ChildME.Attr_PreferredHumidity }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "W":
                            DomainClassW instanceOfW = (DomainClassW)domainModel.InstanceRepository.GetDomainInstances("W").Where(selected => (((DomainClassW)selected).Attr_WId == identities["WId"])).FirstOrDefault();
                            if (instanceOfW != null)
                            {
                                switch (relName)
                                {
                                    case "LD[R6.'target']":
                                        var linkedInstanceOfR6TargetLD = instanceOfW.LinkedR6Target();
                                        if (linkedInstanceOfR6TargetLD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "LiefDeviceId", linkedInstanceOfR6TargetLD.Attr_LiefDeviceId },
                                                { "Environment", linkedInstanceOfR6TargetLD.Attr_Environment },
                                                { "Number", linkedInstanceOfR6TargetLD.Attr_Number },
                                                { "MiddleEntityId", linkedInstanceOfR6TargetLD.Attr_MiddleEntityId },
                                                { "RequestInterval", linkedInstanceOfR6TargetLD.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR6TargetLD.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR6TargetLD.Attr_DeviceStatus },
                                                { "current_state", linkedInstanceOfR6TargetLD.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "SC2":
                            DomainClassSC2 instanceOfSC2 = (DomainClassSC2)domainModel.InstanceRepository.GetDomainInstances("SC2").Where(selected => (((DomainClassSC2)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                            if (instanceOfSC2 != null)
                            {
                                switch (relName)
                                {
                                    case "TS[R4]":
                                        var linkedInstanceOfR4TS = instanceOfSC2.GetSuperClassR4();
                                        if (linkedInstanceOfR4TS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "TSId", linkedInstanceOfR4TS.Attr_TSId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "SC1":
                            DomainClassSC1 instanceOfSC1 = (DomainClassSC1)domainModel.InstanceRepository.GetDomainInstances("SC1").Where(selected => (((DomainClassSC1)selected).Attr_TSId == identities["TSId"])).FirstOrDefault();
                            if (instanceOfSC1 != null)
                            {
                                switch (relName)
                                {
                                    case "TS[R4]":
                                        var linkedInstanceOfR4TS = instanceOfSC1.GetSuperClassR4();
                                        if (linkedInstanceOfR4TS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "TSId", linkedInstanceOfR4TS.Attr_TSId }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "ME":
                            DomainClassME instanceOfME = (DomainClassME)domainModel.InstanceRepository.GetDomainInstances("ME").Where(selected => (((DomainClassME)selected).Attr_MiddleEntityId == identities["MiddleEntityId"])).FirstOrDefault();
                            if (instanceOfME != null)
                            {
                                switch (relName)
                                {
                                    case "LD[R2.'measurement']":
                                        var linkedInstancesOfR2MeasurementLD = instanceOfME.LinkedR2Measurement();
                                        foreach (var linkedInstanceOfR2MeasurementLD in linkedInstancesOfR2MeasurementLD)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "LiefDeviceId", linkedInstanceOfR2MeasurementLD.Attr_LiefDeviceId },
                                                { "Environment", linkedInstanceOfR2MeasurementLD.Attr_Environment },
                                                { "Number", linkedInstanceOfR2MeasurementLD.Attr_Number },
                                                { "MiddleEntityId", linkedInstanceOfR2MeasurementLD.Attr_MiddleEntityId },
                                                { "RequestInterval", linkedInstanceOfR2MeasurementLD.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR2MeasurementLD.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR2MeasurementLD.Attr_DeviceStatus },
                                                { "current_state", linkedInstanceOfR2MeasurementLD.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "MML[R5.'middle']":
                                        var linkedInstanceOfR5OneMiddleMML = instanceOfME.LinkedR5OtherLief();
                                        if (linkedInstanceOfR5OneMiddleMML != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MMLId", linkedInstanceOfR5OneMiddleMML.Attr_MMLId },
                                                { "MiddleEntityId", linkedInstanceOfR5OneMiddleMML.Attr_MiddleEntityId },
                                                { "LiefDeviceId", linkedInstanceOfR5OneMiddleMML.Attr_LiefDeviceId }
                                            });
                                        }
                                        break;
                                    case "TE[R1]":
                                        var linkedInstanceOfR1TE = instanceOfME.LinkedR1();
                                        if (linkedInstanceOfR1TE != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "TopEntityId", linkedInstanceOfR1TE.Attr_TopEntityId },
                                                { "X", linkedInstanceOfR1TE.Attr_X },
                                                { "S", linkedInstanceOfR1TE.Attr_S },
                                                { "TestInterval", linkedInstanceOfR1TE.Attr_TestInterval }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "MML":
                            DomainClassMML instanceOfMML = (DomainClassMML)domainModel.InstanceRepository.GetDomainInstances("MML").Where(selected => (((DomainClassMML)selected).Attr_MMLId == identities["MMLId"])).FirstOrDefault();
                            if (instanceOfMML != null)
                            {
                                switch (relName)
                                {
                                    case "ME[R5.'middle']":
                                        var linkedInstanceOfR5OneMiddleME = instanceOfMML.LinkedR5OneMiddle();
                                        if (linkedInstanceOfR5OneMiddleME != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MiddleEntityId", linkedInstanceOfR5OneMiddleME.Attr_MiddleEntityId },
                                                { "TopEntityId", linkedInstanceOfR5OneMiddleME.Attr_TopEntityId },
                                                { "Comfortable", linkedInstanceOfR5OneMiddleME.Attr_Comfortable },
                                                { "PreferredTemperature", linkedInstanceOfR5OneMiddleME.Attr_PreferredTemperature },
                                                { "PreferredHumidity", linkedInstanceOfR5OneMiddleME.Attr_PreferredHumidity }
                                            });
                                        }
                                        break;
                                    case "LD[R5.'lief']":
                                        var linkedInstanceOfR5OtherLiefLD = instanceOfMML.LinkedR5OtherLief();
                                        if (linkedInstanceOfR5OtherLiefLD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "LiefDeviceId", linkedInstanceOfR5OtherLiefLD.Attr_LiefDeviceId },
                                                { "Environment", linkedInstanceOfR5OtherLiefLD.Attr_Environment },
                                                { "Number", linkedInstanceOfR5OtherLiefLD.Attr_Number },
                                                { "MiddleEntityId", linkedInstanceOfR5OtherLiefLD.Attr_MiddleEntityId },
                                                { "RequestInterval", linkedInstanceOfR5OtherLiefLD.Attr_RequestInterval },
                                                { "CurrentInterval", linkedInstanceOfR5OtherLiefLD.Attr_CurrentInterval },
                                                { "DeviceStatus", linkedInstanceOfR5OtherLiefLD.Attr_DeviceStatus },
                                                { "current_state", linkedInstanceOfR5OtherLiefLD.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "LD":
                            DomainClassLD instanceOfLD = (DomainClassLD)domainModel.InstanceRepository.GetDomainInstances("LD").Where(selected => (((DomainClassLD)selected).Attr_LiefDeviceId == identities["LiefDeviceId"])).FirstOrDefault();
                            if (instanceOfLD != null)
                            {
                                switch (relName)
                                {
                                    case "OOD[R3.'right']":
                                        var linkedInstanceOfR3OneRightOOD = instanceOfLD.LinkedR3OtherLeft();
                                        if (linkedInstanceOfR3OneRightOOD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "OodId", linkedInstanceOfR3OneRightOOD.Attr_OodId },
                                                { "left_LiefDeviceId", linkedInstanceOfR3OneRightOOD.Attr_left_LiefDeviceId },
                                                { "right_LiefDeviceId", linkedInstanceOfR3OneRightOOD.Attr_right_LiefDeviceId }
                                            });
                                        }
                                        break;
                                    case "OOD[R3.'left']":
                                        var linkedInstanceOfR3OtherLeftOOD = instanceOfLD.LinkedR3OneRight();
                                        if (linkedInstanceOfR3OtherLeftOOD != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "OodId", linkedInstanceOfR3OtherLeftOOD.Attr_OodId },
                                                { "left_LiefDeviceId", linkedInstanceOfR3OtherLeftOOD.Attr_left_LiefDeviceId },
                                                { "right_LiefDeviceId", linkedInstanceOfR3OtherLeftOOD.Attr_right_LiefDeviceId }
                                            });
                                        }
                                        break;
                                    case "MML[R5.'lief']":
                                        var linkedInstanceOfR5OtherLiefMML = instanceOfLD.LinkedR5OneMiddle();
                                        if (linkedInstanceOfR5OtherLiefMML != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MMLId", linkedInstanceOfR5OtherLiefMML.Attr_MMLId },
                                                { "MiddleEntityId", linkedInstanceOfR5OtherLiefMML.Attr_MiddleEntityId },
                                                { "LiefDeviceId", linkedInstanceOfR5OtherLiefMML.Attr_LiefDeviceId }
                                            });
                                        }
                                        break;
                                    case "W[R6]":
                                        var linkedInstanceOfR6W = instanceOfLD.LinkedR6();
                                        if (linkedInstanceOfR6W != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "WId", linkedInstanceOfR6W.Attr_WId },
                                                { "current_state", linkedInstanceOfR6W.Attr_current_state },
                                                { "LiefDeviceId", linkedInstanceOfR6W.Attr_LiefDeviceId }
                                            });
                                        }
                                        break;
                                    case "ME[R2]":
                                        var linkedInstanceOfR2ME = instanceOfLD.LinkedR2();
                                        if (linkedInstanceOfR2ME != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "MiddleEntityId", linkedInstanceOfR2ME.Attr_MiddleEntityId },
                                                { "TopEntityId", linkedInstanceOfR2ME.Attr_TopEntityId },
                                                { "Comfortable", linkedInstanceOfR2ME.Attr_Comfortable },
                                                { "PreferredTemperature", linkedInstanceOfR2ME.Attr_PreferredTemperature },
                                                { "PreferredHumidity", linkedInstanceOfR2ME.Attr_PreferredHumidity }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetDomainOperationsSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(domainOpsParamSpecs);
            return result;
        }

        public override string GetClassesSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(classSpecs);
            return result; 
        }

        public override string GetDomainModelSpec()
        {
            var spec = new {
                name = "ADTTestModel",
                operations = domainOpsParamSpecs,
                classes = classSpecs
            };
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(spec);
            return result;
        }

        public override void RegisterUpdateHandler(ClassPropertiesUpdateHandler classPropertiesUpdateHandler, RelationshipUpdateHandler relationshipUpdateHandler)
        {
            domainModel.InstanceRepository.ClassPropertiesUpdated += classPropertiesUpdateHandler;
            domainModel.InstanceRepository.RelationshipUpdated += relationshipUpdateHandler;
        }

        public override void LoadDomainInstances(string instances)
        {
            string domainName = "ADTTestModel";
            var instancesJson = Newtonsoft.Json.JsonConvert.DeserializeObject<IDictionary<string, IList<IDictionary<string, object>>>>(instances);
            domainModel.InstanceRepository.LoadState(domainName, instancesJson);
        }

        public override string SaveDomainInstances()
        {
            Dictionary<string, List<Dictionary<string, object>>> instances = new Dictionary<string, List<Dictionary<string, object>>>();
            foreach(var ck in classSpecs.Keys)
            {
                var classInstances = GetInstancesRaw(ck);
                if (classInstances.Count > 0)
                {
                    instances.Add(ck, classInstances);
                }
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(instances);
        }
    }
}
