// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;
using Kae.DomainModel.Csharp.Framework.ExternalEntities.AzureIoTHub;

namespace ADTTestModel
{
    public partial class DomainClassLDBase : DomainClassLD
    {
        protected static readonly string className = "LD";

        public string DomainName { get { return CIMADTTestModelLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        protected AIHWrapper azureIoTHubWrapper { get; set; }


        public string GetIdForExternalStorage() {  return $"LiefDeviceId={attr_LiefDeviceId}"; }

        public static DomainClassLDBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassLDBase(instanceRepository, logger, synchronousMode);
            // Extension for Azure IoT Hub
            newInstance.azureIoTHubWrapper = (AIHWrapper)instanceRepository.GetExternalEntity("AIH");
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={newInstance.Attr_LiefDeviceId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassLDBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_LiefDeviceId = Guid.NewGuid().ToString();
            stateMachine = new DomainClassLDStateMachine(this, synchronousMode, instanceRepository, logger);
        }
        protected string attr_LiefDeviceId;
        protected bool stateof_LiefDeviceId = false;

        protected DomainTypeEnvironmentPhysicalQuantities attr_Environment = new DomainTypeEnvironmentPhysicalQuantities() ;
        protected bool stateof_Environment = false;

        protected int attr_Number;
        protected bool stateof_Number = false;

        protected string attr_MiddleEntityId;
        protected bool stateof_MiddleEntityId = false;

        protected int attr_RequestInterval;
        protected bool stateof_RequestInterval = false;

        protected int attr_CurrentInterval;
        protected bool stateof_CurrentInterval = false;

        protected string attr_DeviceStatus;
        protected bool stateof_DeviceStatus = false;

        protected DomainClassLDStateMachine stateMachine;
        protected bool stateof_current_state = false;

        public string Attr_LiefDeviceId { get { return attr_LiefDeviceId; } set { attr_LiefDeviceId = value; stateof_LiefDeviceId = true; } }
        public DomainTypeEnvironmentPhysicalQuantities Attr_Environment { get { return attr_Environment; } set { attr_Environment = value; stateof_Environment = true; } }
        public int Attr_Number { get { return attr_Number; } set { attr_Number = value; stateof_Number = true; azureIoTHubWrapper.UpdateProperty("Number", value, Attr_LiefDeviceId); } }
        public string Attr_MiddleEntityId { get { return attr_MiddleEntityId; } }
        public int Attr_RequestInterval { get { return attr_RequestInterval; } set { attr_RequestInterval = value; stateof_RequestInterval = true; azureIoTHubWrapper.UpdateProperty("RequestInterval", value, Attr_LiefDeviceId); } }
        public int Attr_CurrentInterval { get { return attr_CurrentInterval; } set { attr_CurrentInterval = value; stateof_CurrentInterval = true; } }
        public string Attr_DeviceStatus { get { return attr_DeviceStatus; } set { attr_DeviceStatus = value; stateof_DeviceStatus = true; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassLD instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "LiefDeviceId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_LiefDeviceId)
                        {
                            result = false;
                        }
                        break;
                    case "Environment":
                        if ((DomainTypeEnvironmentPhysicalQuantities)conditionPropertyValues[propertyName] != instance.Attr_Environment)
                        {
                            result = false;
                        }
                        break;
                    case "Number":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_Number)
                        {
                            result = false;
                        }
                        break;
                    case "MiddleEntityId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_MiddleEntityId)
                        {
                            result = false;
                        }
                        break;
                    case "RequestInterval":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_RequestInterval)
                        {
                            result = false;
                        }
                        break;
                    case "CurrentInterval":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_CurrentInterval)
                        {
                            result = false;
                        }
                        break;
                    case "DeviceStatus":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_DeviceStatus)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR2ME;
        public DomainClassME LinkedR2()
        {
            if (relR2ME == null)
            {
                var candidates = instanceRepository.GetDomainInstances("ME").Where(inst=>(this.Attr_MiddleEntityId==((DomainClassME)inst).Attr_MiddleEntityId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "ME", "R2", candidates, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR2ME = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R2", Phrase = "" };

            }
            return relR2ME.GetDestination<DomainClassME>();
        }

        public bool LinkR2(DomainClassME instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR2ME == null)
            {
                this.attr_MiddleEntityId = instance.Attr_MiddleEntityId;
                this.stateof_MiddleEntityId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={this.Attr_LiefDeviceId}):link[ME(MiddleEntityId={instance.Attr_MiddleEntityId})]");

                result = (LinkedR2()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR2ME });
                }
            }
            return result;
        }

        public bool UnlinkR2(DomainClassME instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR2ME != null && ( this.Attr_MiddleEntityId==instance.Attr_MiddleEntityId ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR2ME });
        
                this.attr_MiddleEntityId = null;
                this.stateof_MiddleEntityId = true;
                relR2ME = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={this.Attr_LiefDeviceId}):unlink[ME(MiddleEntityId={instance.Attr_MiddleEntityId})]");


                result = true;
            }
            return result;
        }
        public DomainClassOOD LinkedR3OtherLeft()
        {
            var candidates = instanceRepository.GetDomainInstances("OOD").Where(inst=>(this.Attr_LiefDeviceId==((DomainClassOOD)inst).Attr_left_LiefDeviceId));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "OOD", "R3_Left", candidates, () => { return DomainClassOODBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassOOD)candidates.FirstOrDefault()).LinkedR3OneRight();
            }
            return (DomainClassOOD)candidates.FirstOrDefault();
        }


        public DomainClassOOD LinkedR3OneRight()
        {
            var candidates = instanceRepository.GetDomainInstances("OOD").Where(inst=>(this.Attr_LiefDeviceId==((DomainClassOOD)inst).Attr_right_LiefDeviceId));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "OOD", "R3_Right", candidates, () => { return DomainClassOODBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassOOD)candidates.FirstOrDefault()).LinkedR3OtherLeft();
            }
            return (DomainClassOOD)candidates.FirstOrDefault();
        }


        public DomainClassMML LinkedR5OneMiddle()
        {
            var candidates = instanceRepository.GetDomainInstances("MML").Where(inst=>(this.Attr_LiefDeviceId==((DomainClassMML)inst).Attr_LiefDeviceId));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "MML", "R5_Middle", candidates, () => { return DomainClassMMLBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassMML)candidates.FirstOrDefault()).LinkedR5OtherLief();
            }
            return (DomainClassMML)candidates.FirstOrDefault();
        }

        public DomainClassW LinkedR6()
        {
            var candidates = instanceRepository.GetDomainInstances("W").Where(inst=>(this.Attr_LiefDeviceId==((DomainClassW)inst).Attr_LiefDeviceId));
            if (candidates.Count() == 0)
            {
                if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "W", "R6", candidates, () => { return DomainClassWBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                if (candidates.Count() > 0) ((DomainClassW)candidates.FirstOrDefault()).LinkedR6Target();
            }
            return (DomainClassW)candidates.FirstOrDefault();
        }


        public void TakeEvent(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                stateMachine.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                stateMachine.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={this.Attr_LiefDeviceId}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:LD(LiefDeviceId={this.Attr_LiefDeviceId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("LiefDeviceId"))
            {
                attr_LiefDeviceId = (string)propertyValues["LiefDeviceId"];
            }
            stateof_LiefDeviceId = false;
            if (propertyValues.ContainsKey("Environment"))
            {
                attr_Environment.Restore((IDictionary<string, object>)propertyValues["Environment"]);
            }
            stateof_Environment = false;
            if (propertyValues.ContainsKey("Number"))
            {
                attr_Number = (int)propertyValues["Number"];
            }
            stateof_Number = false;
            if (propertyValues.ContainsKey("MiddleEntityId"))
            {
                attr_MiddleEntityId = (string)propertyValues["MiddleEntityId"];
            }
            stateof_MiddleEntityId = false;
            if (propertyValues.ContainsKey("RequestInterval"))
            {
                attr_RequestInterval = (int)propertyValues["RequestInterval"];
            }
            stateof_RequestInterval = false;
            if (propertyValues.ContainsKey("CurrentInterval"))
            {
                attr_CurrentInterval = (int)propertyValues["CurrentInterval"];
            }
            stateof_CurrentInterval = false;
            if (propertyValues.ContainsKey("DeviceStatus"))
            {
                attr_DeviceStatus = (string)propertyValues["DeviceStatus"];
            }
            stateof_DeviceStatus = false;
            if (propertyValues.ContainsKey("current_state"))
            {
                stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            }
            stateof_current_state = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_LiefDeviceId)
            {
                results.Add("LiefDeviceId", attr_LiefDeviceId);
                stateof_LiefDeviceId = false;
            }
            if (stateof_Environment)
            {
                results.Add("Environment", attr_Environment);
                stateof_Environment = false;
            }
            if (stateof_Number)
            {
                results.Add("Number", attr_Number);
                stateof_Number = false;
            }
            if (stateof_MiddleEntityId)
            {
                results.Add("MiddleEntityId", attr_MiddleEntityId);
                stateof_MiddleEntityId = false;
            }
            if (stateof_RequestInterval)
            {
                results.Add("RequestInterval", attr_RequestInterval);
                stateof_RequestInterval = false;
            }
            if (stateof_CurrentInterval)
            {
                results.Add("CurrentInterval", attr_CurrentInterval);
                stateof_CurrentInterval = false;
            }
            if (stateof_DeviceStatus)
            {
                results.Add("DeviceStatus", attr_DeviceStatus);
                stateof_DeviceStatus = false;
            }
            results.Add("current_state", stateMachine.CurrentState);


            return results;
        }

        public string GetIdentities()
        {
            string identities = $"LiefDeviceId={this.Attr_LiefDeviceId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("LiefDeviceId", attr_LiefDeviceId);
            if (!onlyIdentity) results.Add("Environment", attr_Environment);
            results.Add("Number", attr_Number);
            if (!onlyIdentity) results.Add("MiddleEntityId", attr_MiddleEntityId);
            if (!onlyIdentity) results.Add("RequestInterval", attr_RequestInterval);
            if (!onlyIdentity) results.Add("CurrentInterval", attr_CurrentInterval);
            if (!onlyIdentity) results.Add("DeviceStatus", attr_DeviceStatus);
            results.Add("current_state", stateMachine.CurrentState);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
