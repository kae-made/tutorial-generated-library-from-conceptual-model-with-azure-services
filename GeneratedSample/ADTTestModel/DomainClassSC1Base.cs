// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ADTTestModel
{
    public partial class DomainClassSC1Base : DomainClassSC1
    {
        protected static readonly string className = "SC1";

        public string DomainName { get { return CIMADTTestModelLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"TSId={attr_TSId}"; }

        public static DomainClassSC1Base CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassSC1Base(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:SC1(TSId={newInstance.Attr_TSId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassSC1Base(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
        }
        protected string attr_TSId;
        protected bool stateof_TSId = false;

        public string Attr_TSId { get { return attr_TSId; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassSC1 instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "TSId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_TSId)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR4TS;
        public DomainClassTS GetSuperClassR4()
        {
            if (relR4TS == null)
            {
                var candidates = instanceRepository.GetDomainInstances("TS").Where(inst => (this.Attr_TSId==((DomainClassTS)inst).Attr_TSId));
                if (candidates.Count() == 0)
                {
                   if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "TS", "R4_SC1", candidates, () => { return DomainClassTSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
                }
                relR4TS = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R4", Phrase = null };
            }
            return relR4TS.GetDestination<DomainClassTS>();
        }

        public bool LinkR4(DomainClassTS instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4TS == null)
            {
                this.attr_TSId = instance.Attr_TSId;
                this.stateof_TSId = true;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:SC1(TSId={this.Attr_TSId}):link[TS(TSId={instance.Attr_TSId})]");

                result = (GetSuperClassR4()!=null);
                if (result)
                {
                    if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR4TS });
                }
            }
            return result;
        }
        
        public bool UnlinkR4(DomainClassTS instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR4TS != null && ( this.Attr_TSId==instance.Attr_TSId ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR4TS });
        
                this.attr_TSId = null;
                this.stateof_TSId = true;
                relR4TS = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:SC1(TSId={this.Attr_TSId}):unlink[TS(TSId={instance.Attr_TSId})]");

                result = true;
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            if (relR4TS == null)
            {
                isValid = false;
            }
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:SC1(TSId={this.Attr_TSId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("TSId"))
            {
                attr_TSId = (string)propertyValues["TSId"];
            }
            stateof_TSId = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_TSId)
            {
                results.Add("TSId", attr_TSId);
                stateof_TSId = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"TSId={this.Attr_TSId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            if (!onlyIdentity) results.Add("TSId", attr_TSId);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
