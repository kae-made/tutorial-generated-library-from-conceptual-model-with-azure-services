// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ADTTestModel
{
    public partial class DomainClassTEBase : DomainClassTE
    {
        protected static readonly string className = "TE";

        public string DomainName { get { return CIMADTTestModelLib.DomainName; }}
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;


        public string GetIdForExternalStorage() {  return $"TopEntityId={attr_TopEntityId}"; }

        public static DomainClassTEBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null, bool synchronousMode = false)
        {
            var newInstance = new DomainClassTEBase(instanceRepository, logger, synchronousMode);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:TE(TopEntityId={newInstance.Attr_TopEntityId}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassTEBase(InstanceRepository instanceRepository, Logger logger, bool synchronousMode)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_TopEntityId = Guid.NewGuid().ToString();
        }
        protected string attr_TopEntityId;
        protected bool stateof_TopEntityId = false;

        protected int attr_X;
        protected bool stateof_X = false;

        protected string attr_S;
        protected bool stateof_S = false;

        protected int attr_TestInterval;
        protected bool stateof_TestInterval = false;

        public string Attr_TopEntityId { get { return attr_TopEntityId; } set { attr_TopEntityId = value; stateof_TopEntityId = true; } }
        public int Attr_X { get { return attr_X; } set { attr_X = value; stateof_X = true; } }
        public string Attr_S { get { return attr_S; } set { attr_S = value; stateof_S = true; } }
        public int Attr_TestInterval { get { return attr_TestInterval; } set { attr_TestInterval = value; stateof_TestInterval = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassTE instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "TopEntityId":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_TopEntityId)
                        {
                            result = false;
                        }
                        break;
                    case "X":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_X)
                        {
                            result = false;
                        }
                        break;
                    case "S":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_S)
                        {
                            result = false;
                        }
                        break;
                    case "TestInterval":
                        if ((int)conditionPropertyValues[propertyName] != instance.Attr_TestInterval)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        public IEnumerable<DomainClassME> LinkedR1Child()
        {
            var result = new List<DomainClassME>();
            var candidates = instanceRepository.GetDomainInstances("ME").Where(inst=>(this.Attr_TopEntityId==((DomainClassME)inst).Attr_TopEntityId));
            if (instanceRepository.ExternalStorageAdaptor != null) candidates = instanceRepository.ExternalStorageAdaptor.CheckTraverseStatus(DomainName, this, "ME", "R1", candidates, () => { return DomainClassMEBase.CreateInstance(instanceRepository, logger); }, "many").Result;
            foreach (var c in candidates)
            {
                ((DomainClassME)c).LinkedR1();
                result.Add((DomainClassME)c);
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:TE(TopEntityId={this.Attr_TopEntityId}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            if (propertyValues.ContainsKey("TopEntityId"))
            {
                attr_TopEntityId = (string)propertyValues["TopEntityId"];
            }
            stateof_TopEntityId = false;
            if (propertyValues.ContainsKey("X"))
            {
                attr_X = (int)propertyValues["X"];
            }
            stateof_X = false;
            if (propertyValues.ContainsKey("S"))
            {
                attr_S = (string)propertyValues["S"];
            }
            stateof_S = false;
            if (propertyValues.ContainsKey("TestInterval"))
            {
                attr_TestInterval = (int)propertyValues["TestInterval"];
            }
            stateof_TestInterval = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_TopEntityId)
            {
                results.Add("TopEntityId", attr_TopEntityId);
                stateof_TopEntityId = false;
            }
            if (stateof_X)
            {
                results.Add("X", attr_X);
                stateof_X = false;
            }
            if (stateof_S)
            {
                results.Add("S", attr_S);
                stateof_S = false;
            }
            if (stateof_TestInterval)
            {
                results.Add("TestInterval", attr_TestInterval);
                stateof_TestInterval = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"TopEntityId={this.Attr_TopEntityId}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("TopEntityId", attr_TopEntityId);
            if (!onlyIdentity) results.Add("X", attr_X);
            if (!onlyIdentity) results.Add("S", attr_S);
            if (!onlyIdentity) results.Add("TestInterval", attr_TestInterval);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
